[{"/Users/liuguilin/Desktop/web-things/gateway/gateway-app/src/index.tsx":"1","/Users/liuguilin/Desktop/web-things/gateway/gateway-app/src/reportWebVitals.ts":"2","/Users/liuguilin/Desktop/web-things/gateway/gateway-app/src/App.tsx":"3","/Users/liuguilin/Desktop/web-things/gateway/gateway-app/src/i18n.tsx":"4","/Users/liuguilin/Desktop/web-things/gateway/gateway-app/src/views/thing-add.js":"5","/Users/liuguilin/Desktop/web-things/gateway/gateway-app/src/views/settings.tsx":"6","/Users/liuguilin/Desktop/web-things/gateway/gateway-app/src/views/rules.tsx":"7","/Users/liuguilin/Desktop/web-things/gateway/gateway-app/src/components/menu.tsx":"8","/Users/liuguilin/Desktop/web-things/gateway/gateway-app/src/views/home.jsx":"9","/Users/liuguilin/Desktop/web-things/gateway/gateway-app/src/views/addons.jsx":"10","/Users/liuguilin/Desktop/web-things/gateway/gateway-app/src/components/use-things.js":"11","/Users/liuguilin/Desktop/web-things/gateway/gateway-app/src/components/thing.js":"12","/Users/liuguilin/Desktop/web-things/gateway/gateway-app/src/components/new-thing.jsx":"13","/Users/liuguilin/Desktop/web-things/gateway/gateway-app/src/components/adapter.tsx":"14","/Users/liuguilin/Desktop/web-things/gateway/gateway-app/src/components/addon.tsx":"15","/Users/liuguilin/Desktop/web-things/gateway/gateway-app/src/api/index.js":"16","/Users/liuguilin/Desktop/web-things/gateway/gateway-app/src/util.js":"17","/Users/liuguilin/Desktop/web-things/gateway/gateway-app/src/components/capability/light.js":"18","/Users/liuguilin/Desktop/web-things/gateway/gateway-app/src/components/property/brightness.js":"19","/Users/liuguilin/Desktop/web-things/gateway/gateway-app/src/components/property/on-off.js":"20"},{"size":526,"mtime":1607410524000,"results":"21","hashOfConfig":"22"},{"size":463,"mtime":1607410524000,"results":"23","hashOfConfig":"22"},{"size":1263,"mtime":1611673531693,"results":"24","hashOfConfig":"22"},{"size":677,"mtime":1607410524000,"results":"25","hashOfConfig":"22"},{"size":5143,"mtime":1611586816000,"results":"26","hashOfConfig":"22"},{"size":2280,"mtime":1610566107000,"results":"27","hashOfConfig":"22"},{"size":146,"mtime":1607410485000,"results":"28","hashOfConfig":"22"},{"size":2445,"mtime":1607410524000,"results":"29","hashOfConfig":"22"},{"size":3882,"mtime":1611580292000,"results":"30","hashOfConfig":"22"},{"size":8490,"mtime":1611660586304,"results":"31","hashOfConfig":"22"},{"size":747,"mtime":1611562265000,"results":"32","hashOfConfig":"22"},{"size":1538,"mtime":1611583647000,"results":"33","hashOfConfig":"22"},{"size":2920,"mtime":1611586529000,"results":"34","hashOfConfig":"22"},{"size":1815,"mtime":1607489738000,"results":"35","hashOfConfig":"22"},{"size":1656,"mtime":1607489738000,"results":"36","hashOfConfig":"22"},{"size":2677,"mtime":1610835888000,"results":"37","hashOfConfig":"22"},{"size":3092,"mtime":1610283138000,"results":"38","hashOfConfig":"22"},{"size":2249,"mtime":1611084466000,"results":"39","hashOfConfig":"22"},{"size":1001,"mtime":1610934631000,"results":"40","hashOfConfig":"22"},{"size":903,"mtime":1610934631000,"results":"41","hashOfConfig":"22"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},"4koqp0",{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"54"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"44"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62","usedDeprecatedRules":"44"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65","usedDeprecatedRules":"54"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68","usedDeprecatedRules":"54"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71","usedDeprecatedRules":"54"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74","usedDeprecatedRules":"54"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77","usedDeprecatedRules":"54"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80","usedDeprecatedRules":"44"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83","usedDeprecatedRules":"44"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"88","usedDeprecatedRules":"54"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"91","usedDeprecatedRules":"54"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"96","usedDeprecatedRules":"54"},"/Users/liuguilin/Desktop/web-things/gateway/gateway-app/src/index.tsx",[],["97","98"],"/Users/liuguilin/Desktop/web-things/gateway/gateway-app/src/reportWebVitals.ts",[],"/Users/liuguilin/Desktop/web-things/gateway/gateway-app/src/App.tsx",[],"/Users/liuguilin/Desktop/web-things/gateway/gateway-app/src/i18n.tsx",[],"/Users/liuguilin/Desktop/web-things/gateway/gateway-app/src/views/thing-add.js",["99","100","101","102","103"],"import React, {useEffect, useRef, useState} from \"react\";\nimport \"../css/things.css\";\nimport API from \"../api\";\nimport NewThing from \"../components/new-thing\";\nimport {Link} from \"react-router-dom\";\nimport {makeStyles} from \"@material-ui/core/styles\";\nimport useWebSocket, {ReadyState} from \"react-use-websocket\";\nimport Grid from \"@material-ui/core/Grid\";\nimport {Avatar, Paper} from \"@material-ui/core\";\n\n\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        flexGrow: 1,\n        overflow: 'auto',\n        padding: theme.spacing(0, 3),\n    },\n    paper: {\n        maxWidth: 800,\n        margin: `${theme.spacing(1)}px auto`,\n        padding: theme.spacing(2),\n    },\n}));\n\n\nexport default function ThingsAdd() {\n\n    const classes = useStyles();\n\n    const [availableThings, setAvailableThings] = useState([])\n\n    const [socketUrl, setSocketUrl] = useState(\"ws://localhost:9090/new_things\")\n    const didUnmount = useRef(false);\n    const {\n        sendMessage,\n        lastMessage,\n        readyState,\n    } = useWebSocket(socketUrl,\n        {\n            shouldReconnect: (closeEvent) => {\n                /*\n                  useWebSocket will handle unmounting for you, but this is an example of a\n                  case in which you would not want it to automatically reconnect\n                */\n                return didUnmount.current === false;\n            },\n            reconnectAttempts: 10,\n            reconnectInterval: 3000,\n        }\n    );\n\n    const connectionStatus = {\n        [ReadyState.CONNECTING]: 'Connecting',\n        [ReadyState.OPEN]: 'Open',\n        [ReadyState.CLOSING]: 'Closing',\n        [ReadyState.CLOSED]: 'Closed',\n        [ReadyState.UNINSTANTIATED]: 'Uninstantiated',\n    }[readyState];\n\n\n    useEffect(() => {\n            let proto = 'ws:';\n            if (window.location.protocol === 'https:') {\n                proto = 'wss:';\n            }\n            let host = window.location.host\n            setSocketUrl(`ws://localhost:9090/new_things`);\n            requestPairing()\n            return () => {\n                cancelPairing()\n            }\n        }, []\n    )\n\n    useEffect(() => {\n            if (lastMessage != null) {\n                try {\n                    if (lastMessage.data) {\n                        setAvailableThings([...availableThings])\n                        const newThing = JSON.parse(lastMessage.data)\n                        console.log(\"new thing:\", newThing)\n                        if (newThing.hasOwnProperty(\"id\")) {\n                            for (let t of availableThings) {\n                                if (t.id === newThing.id) {\n                                    return\n                                }\n                            }\n\n                            let newList = []\n                            newList = availableThings\n                            newList.push(newThing)\n                            setAvailableThings([...newList])\n                            console.log(\"newList:\", newList)\n                            console.log(\"availableThings:\", availableThings)\n                        }\n                    }\n                } catch (e) {\n                    console.log(e)\n                }\n            }\n        }, [lastMessage]\n    )\n\n\n    function requestPairing() {\n        API.startPairing(5000).then((json) => {\n            console.log(\"action:\", json)\n        }).catch((err) => {\n            console.log(err)\n        })\n    }\n\n    function cancelPairing() {\n\n        didUnmount.current = true;\n        API.cancelPairing().then((json) => {\n            console.log(\"action:\", json)\n        }).catch((err) => {\n            console.log(err)\n        })\n    }\n\n    function addThingRequest(thing) {\n        try {\n            if (thing) {\n                API.addThing(thing).catch(e => {\n                    console.log(e)\n                })\n            }\n        } catch (e) {\n            console.log(e)\n        }\n\n    }\n\n    function RenderAvailableThings() {\n        let list = []\n        for (let thing of availableThings) {\n            if (thing.hasOwnProperty(\"id\")) {\n                console.log(\"render thing\", thing)\n                const newThing = <Paper className={classes.paper}>\n                    <Grid container wrap=\"nowrap\" spacing={2}>\n                        <Grid item>\n                            <Avatar>W</Avatar>\n                        </Grid>\n                        <Grid item xs>\n                    <NewThing key={thing.id} thing={thing}\n                              addNewThingRequest={addThingRequest}/>\n                        </Grid>\n\n                    </Grid>\n                </Paper>\n                list.push(newThing)\n            }\n        }\n        return list\n    }\n\n\n    return (\n        <>\n            <Link to=\"/things\">\n                <button id=\"back-button\" className=\"icon-button\"/>\n            </Link>\n            <div className={classes.root}>\n\n            <Grid container wrap=\"nowrap\"  alignItems=\"center\" justify=\"center\" direction=\"column\" spacing={1}>\n                {RenderAvailableThings()}\n            </Grid>\n\n            </div>\n        </>\n    )\n}\n\n\n\n",["104","105"],"/Users/liuguilin/Desktop/web-things/gateway/gateway-app/src/views/settings.tsx",["106"],"import React from 'react'\nimport {Trans, useTranslation} from \"react-i18next\";\nimport {Link} from \"react-router-dom\";\nimport \"../css/settings.css\";\n\n\nconst Settings: React.FC = () => {\n\n    return (\n        <>\n            <nav id=\"settings-menu\" className=\"settings-section\">\n\n                <ul>\n                    <li className=\"settings-item\"><Link id=\"domain-settings-link\"\n                                                        to=\"/settings/domain\"><Trans>Domain</Trans></Link></li>\n                    <li className=\"settings-item\"><Link id=\"network-settings-link\"\n                                                        to=\"/settings/network\"><Trans>Network</Trans></Link></li>\n                    <li className=\"settings-item\"><Link id=\"user-settings-link\"\n                                                        to=\"/settings/users\"><Trans>Users</Trans></Link>\n                    </li>\n                    <li className=\"settings-item\"><Link id=\"addon-settings-link\"\n                                                        to=\"/settings/addons\"><Trans>Addons</Trans></Link></li>\n\n                    <li className=\"settings-item\"><Link id=\"localization-settings-link\"\n                                                        to=\"/settings/localization\"><Trans>Localization</Trans></Link>\n                    </li>\n                    <li className=\"settings-item\"><Link id=\"update-settings-link\"\n                                                        to=\"/settings/updates\"><Trans>Updates</Trans></Link></li>\n                    <li className=\"settings-item\"><Link id=\"authorization-settings-link\"\n                                                        to=\"/settings/authorizations\"><Trans>Authorizations</Trans></Link>\n                    </li>\n                    <li className=\"settings-item\"><Link id=\"experiment-settings-link\"\n                                                        to=\"/settings/experiments\"><Trans>Experiments</Trans></Link>\n                    </li>\n                    <li className=\"settings-item\"><Link id=\"developer-settings-link\"\n                                                        to=\"/settings/developer\"><Trans>Developer</Trans></Link></li>\n                </ul>\n            </nav>\n        </>\n    );\n}\n\nexport default Settings\n","/Users/liuguilin/Desktop/web-things/gateway/gateway-app/src/views/rules.tsx",[],"/Users/liuguilin/Desktop/web-things/gateway/gateway-app/src/components/menu.tsx",["107"],"import React, {useState} from \"react\";\nimport \"../css/menu.css\"\nimport {Trans} from 'react-i18next';\nimport {NavLink} from 'react-router-dom'\n\n\ninterface IStataController {\n    menuBtnShow: boolean,\n    menuListShow: boolean,\n    menuScrimShow: boolean,\n}\n\nconst Menu: React.FC = props => {\n\n\n    function initState(): IStataController {\n        return {\n            menuBtnShow: true,\n            menuListShow: false,\n            menuScrimShow: false,\n        }\n    }\n\n    const [state, setState] = useState<IStataController>(initState());\n\n\n    function hidden() {\n        setState({\n            menuBtnShow: state.menuBtnShow,\n            menuListShow: false,\n            menuScrimShow: false,\n        })\n\n    }\n\n    function toggleMenu() {\n        setState({\n            menuBtnShow: state.menuBtnShow,\n            menuListShow: !state.menuListShow,\n            menuScrimShow: !state.menuScrimShow,\n        })\n    }\n\n    const MenuHidden = () => {\n        setState({\n            menuBtnShow: false,\n            menuListShow: state.menuListShow,\n            menuScrimShow: state.menuScrimShow,\n        })\n    }\n\n    return (\n        <React.Fragment>\n            <div id=\"menu-scrim\" onClick={hidden} className={state.menuScrimShow ? \"\" : \"hidden\"}/>\n            <button onClick={toggleMenu} id=\"menu-button\"\n                    className={state.menuBtnShow ? \"icon-button\" : \"icon-button hidden\"}/>\n            <nav id=\"main-menu\" className={state.menuScrimShow ? \"\" : \"hidden\"}>\n                <ul>\n                    <li>\n                        <NavLink onClick={() => {\n                            hidden()\n                        }} id=\"things-menu-item\" to=\"/things\" activeClassName=\"selected\">\n                            <Trans>Things</Trans></NavLink>\n                    </li>\n                    <li>\n                        <NavLink onClick={() => {\n                            hidden()\n                        }} id=\"rules-menu-item\" to=\"/rules\" activeClassName=\"selected\"><Trans>Rules</Trans></NavLink>\n                    </li>\n                    <li>\n                        <NavLink onClick={() => {\n                            hidden()\n                        }} id=\"settings-menu-item\" to=\"/settings\"\n                                 activeClassName=\"selected\"><Trans>Settings</Trans></NavLink>\n                    </li>\n                </ul>\n            </nav>\n        </React.Fragment>\n    )\n};\n\n\nexport default Menu;\n","/Users/liuguilin/Desktop/web-things/gateway/gateway-app/src/views/home.jsx",["108","109","110","111","112"],"import React, {useCallback, useEffect, useReducer, useRef, useState} from \"react\";\nimport \"../css/things.css\";\nimport API from \"../api\";\nimport \"../components/new-thing\"\nimport {makeStyles} from '@material-ui/core/styles';\nimport {Link} from \"react-router-dom\";\nimport useWebSocket, {ReadyState} from \"react-use-websocket\";\nimport thingsReducer from \"../components/use-things\";\nimport Thing from \"../components/thing\";\nimport Grid from \"@material-ui/core/Grid\";\nimport {spacing} from \"@material-ui/system\";\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        flexGrow: 1,\n    },\n    paper: {\n        padding: theme.spacing(4),\n        textAlign: 'center',\n        color: theme.palette.text.secondary,\n    },\n}));\n\nexport const ThingContext = React.createContext()\n\n\nexport default function Home() {\n\n    const [thingsContext, setThingsContext] = useReducer(thingsReducer, [])\n\n    const [socketUrl, setSocketUrl] = useState(\"ws://localhost:9090/things/\");\n\n    const didUnmount = useRef(false);\n    const classes = useStyles();\n\n    const {\n        sendMessage,\n        lastMessage,\n        readyState,\n    } = useWebSocket(socketUrl,\n        {\n            shouldReconnect: (closeEvent) => {\n                /*\n                  useWebSocket will handle unmounting for you, but this is an example of a\n                  case in which you would not want it to automatically reconnect\n                */\n                return didUnmount.current === false;\n            },\n            reconnectAttempts: 10,\n            reconnectInterval: 3000,\n        }\n    );\n\n    const connectionStatus = {\n        [ReadyState.CONNECTING]: 'Connecting',\n        [ReadyState.OPEN]: 'Open',\n        [ReadyState.CLOSING]: 'Closing',\n        [ReadyState.CLOSED]: 'Closed',\n        [ReadyState.UNINSTANTIATED]: 'Uninstantiated',\n    }[readyState];\n\n    const handleSendMessage = useCallback((data) =>\n            sendMessage(JSON.stringify(data)),\n        []);\n\n\n    useEffect(() => {\n\n             setThingsContext([...thingsContext])\n            API.getThings().then((getThings) => {\n                if (getThings === null) {\n                    return\n                }\n                console.log(\"getThings:\", getThings)\n\n                getThings.forEach(thing => {\n                    setThingsContext({messageType: \"addThing\", thing: thing})\n                })\n            }).catch(e => {\n                console.log(\"GET /things err:\", e)\n            })\n            return () => {\n                didUnmount.current = true;\n            };\n        }, []\n    )\n\n    useEffect(() => {\n            if (lastMessage !== null) {\n                console.log(\"lastMessage:\",lastMessage)\n                if (lastMessage.data) {\n                    let message = JSON.parse(lastMessage.data)\n                    if (message.messageType === \"propertyStatus\" && message.hasOwnProperty(\"id\") && message.hasOwnProperty(\"data\")) {\n\n                    }\n                }\n            }\n        }, [lastMessage]\n    )\n\n\n    function RenderThingsView() {\n        let list = []\n        for (let t of thingsContext) {\n            console.log(\"item:----\",t)\n            const thing =\n                <Thing key={t.id} thing={t}/>\n            list.push(thing)\n        }\n        return list\n    }\n\n\n    return (\n        <>\n            {/*{addonThingShow && <ul id=\"new-things\"> {RenderAvailableThings()}</ul>}*/}\n            <Link to=\"/things/add\">\n                <button id=\"discover-addons-button\"\n                        className=\"icon-button right-top-button\"/>\n            </Link>\n            <ThingContext.Provider value={{handleSendMessage}}>\n                <div id=\"things-view\" className={classes.root}>\n                    <Grid container spacing={1}>\n                        {RenderThingsView()}\n                    </Grid></div>\n            </ThingContext.Provider>\n        </>\n    )\n};\n\n\n\n","/Users/liuguilin/Desktop/web-things/gateway/gateway-app/src/views/addons.jsx",["113","114","115"],"import React, {useEffect, useState} from \"react\";\nimport \"../css/settings.css\"\nimport Adapter from \"../components/adapter\";\nimport {Link} from \"react-router-dom\";\nimport Addon from \"../components/addon\";\nimport API from \"../api\"\n\n\n// Adapter like this\n//------------\n// author: \"Tim Hellhake\"\n// description: \"Runs for the specified number of seconds\"\n// enabled: true\n// exec: \"{nodeLoader} {path}\"\n// homepage_url: \"https://github.com/tim-hellhake/timer-adapter#readme\"\n// id: \"timer-adapter\"\n// name: \"Timer\"\n// primary_type: \"adapter\"\n// version: \"1.6.1\"\n//----------------\n\n\n// Addon like this\n//------------\n// \"id\": \"yo-notifier\",\n// \"name\": \"Yo\",\n// \"description\": \"Send a Yo to your phone (gateway >= 0.9.0 only)\",\n// \"author\": \"Tim Hellhake\",\n// \"homepage_url\": \"https://github.com/tim-hellhake/yo-notifier#readme\",\n// \"license_url\": \"https://raw.githubusercontent.com/tim-hellhake/yo-notifier/master/LICENSE\",\n// \"version\": \"0.1.4\",\n//\"url\": \"https://github.com/tim-hellhake/yo-notifier/releases/download/0.1.4/yo-notifier-0.1.4.tgz\",\n// \"checksum\": \"83fb9753956b6e786137d294d801b4589971a53b5c6f04618bd3855ddeea5862\",\n// \"primary_type\": \"notifier\"\n//------------\n\n\nconst Addons = () => {\n\n    const [installedAddons, setInstalledAddons] = useState(new Map())\n    const [availableAddons, setAvailableAddons] = useState(new Map())\n\n\n    //获取到的gateway已安装的addons\n    const [currentAddonsList, setCurrentAddonList] = useState()\n\n    function fetchInstalledAddonsList() {\n        console.log(\"begin fetch the installed addon list\")\n        API.getInstalledAddons().then(body => {\n            if (!body) {\n                return;\n            }\n            let installedList = new Map()\n            for (const s of body) {\n                try {\n                    installedList.set(s.id, s)\n                } catch (err) {\n                    console.error(`Failed to parse add-on settings: ${err}`);\n                }\n            }\n            setInstalledAddons(installedList)\n        }).catch((err) => {\n            console.log(\"fetch the installed addon list err:\", err)\n        })\n    }\n\n    function fetchAvailableAddonList() {\n        API.getAddonsInfo().then((data) => {\n            if (!data || !data.urls || !data.architecture || !data.version) {\n                console.log(data.urls)\n                return;\n            }\n\n            const params = new URLSearchParams();\n            params.set('arch', data.architecture);\n            params.set('version', data.version);\n            params.set('node', data.node_version);\n            params.set('python', data.python_version);\n            const promises = [];\n            for (const url of data.urls) {\n                console.log(url)\n                promises.push(fetch(`${url}?${params.toString()}`, {\n                    method: 'GET',\n                    cache: 'reload',\n                    headers: {\n                        Accept: 'application/json',\n                    },\n                }));\n            }\n            console.log(promises, \"promises.....\")\n            return Promise.all(promises)\n        }).then(\n            (responses) => {\n                const promises = []\n                for (const resp of responses) {\n                    promises.push(resp.json())\n                }\n                return Promise.all(promises)\n            }).then((bodies) => {\n                let availableList = availableAddons\n                for (const body of bodies) {\n                    for (const addon of body) {\n                        const entry = {\n                            id: addon.id,\n                            name: addon.name,\n                            description: addon.description,\n                            author: addon.author,\n                            homepage_url: addon.homepage,\n                            license_url: addon.license_url,\n                            version: addon.version,\n                            url: addon.url,\n                            checksum: addon.checksum,\n                            primary_type: addon.primary_type,\n                            installed: installedAddons.has(addon.id)\n                        }\n                        if (availableList.has(addon.id) &&\n                            this.compareSemver(availableList.get(addon.id).version,\n                                entry.version) >= 0) {\n                            continue;\n                        }\n                        availableList.set(addon.id, entry)\n\n                    }\n                }\n                setAvailableAddons(availableList);\n                console.log(\"availableList:\", availableList)\n            }\n        ).catch((err) => {\n            console.error(err)\n        })\n    }\n\n    function installAddon(id, url, checksum) {\n        API.installAddon(id, url, checksum).catch((err) => {\n            console.error(\"install addon fail err\", err)\n        })\n    }\n\n    function renderInstalledAddonsList(adapterList) {\n        const list = []\n        for (const [id, adapter] of adapterList) {\n            const addon = <Adapter key={id}\n                                   name={adapter.name}\n                                   author={adapter.author}\n                                   description={adapter.description}\n                                   homepage_url={adapter.homepage_url}\n                                   license={adapter.license_url}\n                                   version={adapter.version}\n                                   primary_type={adapter.primary_type}\n                                   exec={adapter.exec}\n                                   enabled={adapter.enabled}\n                                   updata={false}\n                                   schema={adapter.schema}\n                                   isUpdate={adapter.isUpdate}\n            />\n            list.push(addon)\n        }\n        return list\n    }\n\n    function renderAvailableAddonsList(addonsList) {\n\n        let addonList = []\n        for (const [id, entry] of addonsList) {\n            const addon =\n                <Addon key={id}\n                       id={id}\n                       name={entry.name}\n                       author={entry.author}\n                       description={entry.description}\n                       homepage_url={entry.homepage_url}\n                       license_url={entry.license_url}\n                       version={entry.version}\n                       primary_type={entry.primary_type}\n                       checksum={entry.checksum}\n                       url={entry.url}\n                       onAdd={installAddon}/>\n            addonList.push(addon)\n        }\n        return addonList\n    }\n\n\n    useEffect(() => {\n        fetchInstalledAddonsList()\n        fetchAvailableAddonList()\n    }, [])\n\n\n    const [isDiscover, setDiscover] = useState(false);\n\n    return (\n        <>\n            <section id=\"addon-settings\" className=\"settings-section\">\n\n                <section id=\"addon-main-settings\"\n                         className={isDiscover ? \"settings-subsection hidden\" : \"settings-subsection\"}>\n                    <button id=\"discover-addons-button\" onClick={() => setDiscover(true)}\n                            className=\"icon-button right-top-button\"/>\n                    <Link to=\"/settings\">\n                        <button id=\"back-button\" className=\"icon-button\"/>\n                    </Link>\n                    <ul id=\"installed-addons-list\">\n                        {\n                            installedAddons && renderInstalledAddonsList(installedAddons)\n                        }\n                    </ul>\n                </section>\n\n                {/*<section id=\"addon-config-settings\" className=\"hidden settings-subsection\"/>*/}\n\n\n                <section id=\"addon-discovery-settings\"\n                         className={isDiscover ? \"settings-subsection\" : \"settings-subsection hidden\"}>\n\n                    <button onClick={() => setDiscover(false)} id=\"back-button\" className=\"icon-button\"/>\n\n                    <div id=\"addon-discovery-container\" className=''>\n                        <input id=\"discovered-addons-search\" className=\"hidden\"/>\n                        <ul id=\"discovered-addons-list\">\n                            {availableAddons && renderAvailableAddonsList(availableAddons)};\n                        </ul>\n                    </div>\n                </section>\n\n            </section>\n        </>\n    );\n}\n\n\nexport default Addons;\n","/Users/liuguilin/Desktop/web-things/gateway/gateway-app/src/components/use-things.js",["116"],"import React from \"react\";\n\n\nexport default function thingsReducer(context, action) {\n    console.log(\"action:\", action)\n    switch (action.messageType) {\n        case \"propertyStatus\":\n\n            return context\n        case \"addThing\":\n            console.log(\"thingsReducer addThing:\", action)\n            console.log(\"state\", context)\n            let newThing = action.thing\n            for (let thing of context) {\n                if (thing.id === newThing.id) {\n                    return context\n                }\n            }\n            let newThings = context\n            newThings.push(newThing)\n            console.log(\"newThings:\", newThings)\n            return [...newThings]\n        default:\n            return context\n    }\n}\n\n\n\n","/Users/liuguilin/Desktop/web-things/gateway/gateway-app/src/components/thing.js",["117","118"],"import React, {useCallback, useContext} from \"react\";\nimport Light from \"./capability/light\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Card from \"@material-ui/core/Card\";\nimport {ThingContext} from \"../views/home\"\n\n\nexport default function Thing(props) {\n\n    const {handleSendMessage} = useContext(ThingContext)\n\n    const setPropertyValue = useCallback((property) => {\n            console.log(\"set property\", property)\n            const data = {}\n            console.log(data)\n            let message = {}\n            message.messageType = \"setProperty\"\n            message.id = props.thing.id\n            message.data = {}\n            message.data[property.name] = property.value\n            console.log(\"set property message:\",message)\n            handleSendMessage(message)\n        }, []\n    )\n\n    const propertyValueChanged = (thingId, value) => {\n\n    }\n\n    function RenderThing() {\n        const data = props.thing\n        console.log(\"thing render data:\",data)\n        let thing\n        if (data.hasOwnProperty(\"selectedCapability\")) {\n            let selectedCapability = data[\"selectedCapability\"]\n            if (selectedCapability === \"Light\") {\n                thing = <Light key={data.id} thing={data}/>\n            }\n        }\n        return thing\n    }\n\n    return <><ThingContext.Provider value={{setPropertyValue}}>\n        <Grid item xs={6} sm={3} id=\"thing-card\">\n            <Card elevation={5} >\n                {RenderThing()}\n            </Card>\n        </Grid>\n    </ThingContext.Provider>\n    </>\n\n}\n","/Users/liuguilin/Desktop/web-things/gateway/gateway-app/src/components/new-thing.jsx",["119","120"],"import React, {useEffect, useRef, useState} from \"react\";\nimport {useTranslation} from 'react-i18next'\nimport \"../css/things.css\"\nimport Utils from \"../util\"\nimport Card from '@material-ui/core/Card';\nimport {Button} from \"@material-ui/core\";\nimport {classes} from \"istanbul-lib-coverage\";\nimport {makeStyles} from \"@material-ui/core/styles\";\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        flexGrow: 1,\n    },\n    paper: {\n        padding: theme.spacing(2),\n        textAlign: 'center',\n        color: theme.palette.text.secondary,\n    },\n}));\n\n\nexport default function NewThing(props) {\n\n    const classes = useStyles();\n\n    let {t, i18n} = useTranslation()\n\n    const fileInput = useRef()\n    const [iconFile, setIconFile] = useState()\n\n    const [selectedCapability, setSelectedCapability] = useState(props.thing[\"@type\"][0])\n\n    const [title, setTitle] = useState(props.thing.title)\n\n    function typeOption(typeList) {\n        let options = []\n        for (let i of typeList) {\n            const option = <option value={i} key={i} selected={options.length === 0}>\n                {t(i)}\n            </option>\n            options.push(option)\n        }\n        return options\n    }\n\n    useEffect(()=>{\n\n       // setSelectedCapability(props[\"@type\"][0])\n        console.log(selectedCapability)\n\n    })\n\n    return <Card className={classes.root} id={\"new-thing \" + Utils.getClassFromCapability(selectedCapability)}>\n        <div className=\" new-thing-metadata\">\n            <input type=\" text\" name=\"thing-title\" readOnly={false} onChange={(e) => setTitle(e.target.value)}\n                   className=\" new-thing-title\" value={props.thing.title}/>\n\n            <span className=\" new-thing-spacer\"/>\n\n            <select className=\" new-thing-type\" onChange={(e) => {\n                setSelectedCapability(e.target.value)\n            }}>\n                {typeOption(Utils.sortCapabilities(props.thing[\"@type\"]).concat(\"Custom\"))}\n            </select>\n\n            <span className=\" new-thing-spacer\"/>\n\n            {selectedCapability === \"Custom\" &&\n            <input type=\"file\" className=\"new-thing-custom-icon-input\" ref={fileInput}\n                   accept=\"image/jpeg,image/png,image/svg+xml\" onChange={(e) => {\n                setIconFile(e.target.value)\n            }}/>}\n\n            {selectedCapability === \"Custom\" && <label className=\" new-thing-custom-icon-label text-button\"\n                                                       onClick={() => fileInput.current.click()}>{t('chooseIcon')}</label>}\n            {selectedCapability === \"Custom\" && <span className=\" new-thing-label\">{iconFile}</span>}\n\n        </div>\n        <Button color=\"primary\" variant=\"contained\" onClick={() => {\n                props.addNewThingRequest({...props.thing, title: title, \"selectedCapability\": selectedCapability, iconFile: iconFile})\n        }}>  {t('Save')}\n        </Button>\n    </Card>\n\n}\n\n","/Users/liuguilin/Desktop/web-things/gateway/gateway-app/src/components/adapter.tsx",["121"],"import React from \"react\";\nimport {Trans} from \"react-i18next\";\nimport \"../css/settings.css\";\n\ninterface adapterInfo {\n    name: string,\n    version: string,\n    description: string,\n    homepage_url: string,\n    author: string,\n    license: string,\n    enabled: boolean,\n    isUpdate: boolean,\n\n}\n\nconst Adapter: React.FC<adapterInfo> = props => {\n\n    return <li className=\"addon-item\">\n        <div className=\"addon-settings-header adapter\">\n            <span className=\"addon-settings-name\">{props.name}</span>\n            <span className=\"addon-settings-version\">{props.version}</span>\n            <span className=\"addon-settings-description\">{props.description}</span>\n            <span className=\"addon-settings-author\"><Trans>author</Trans>\n                <a href={props.homepage_url} target=\"_blank\" rel=\"noopener\">{props.author}</a>\n            </span>\n            <span className=\"addon-settings-license\"\n                  data-license-href={props.license}><Trans>license</Trans>\n           </span>\n        </div>\n        <div className=\"addon-settings-controls\">\n            <button className=\"text-button addon-settings-config\"><Trans>configure</Trans>\n            </button>\n            {props.isUpdate && <button\n                className=\"text-button addon-settings-update\"><Trans>update</Trans>\n            </button>}\n            <span className=\"addon-settings-spacer\"></span>\n            <button className=\"text-button addon-settings-remove\"\n            ><Trans>remove</Trans>\n            </button>\n            <button\n                className={props.enabled ? \"text-button addon-settings-disable\" : \"text-button addon-settings-enable\"}>\n                {props.enabled ? <Trans>disable</Trans> : <Trans>enable</Trans>}\n            </button>\n        </div>\n    </li>\n}\n\n\nexport default Adapter;\n\n","/Users/liuguilin/Desktop/web-things/gateway/gateway-app/src/components/addon.tsx",["122"],"import React from \"react\";\nimport {Trans} from 'react-i18next';\nimport \"../css/settings.css\";\n\ninterface addonProps {\n    id: string,\n    name: string,\n    version: string,\n    description: string,\n    author: string,\n    license_url: string,\n    homepage_url: string,\n    primary_type: string,\n    checksum: string,\n    url: string,\n    onAdd: (addonId: string, addonUrl: string, addonChecksum: string) => {}\n}\n\n\nconst Addon: React.FC<addonProps> = props => {\n\n    // @ts-ignore\n    return (\n        <li className=\"discovered-addon-item\">\n            <div className=\"addon-settings-header adapter\">\n                <span className=\"addon-settings-name\">{props.name}</span>\n                <span className=\"addon-settings-version\">{props.version}</span>\n                <span className=\"addon-settings-description\">{props.description}</span>\n                <span className=\"addon-settings-author\">by\n                    <a href={props.homepage_url} target=\"_blank\" rel=\"noopener\">{props.author}</a>\n                </span>\n                <span id=\"addon-license-calendar\" className=\"addon-settings-license\"\n                      data-license-href={props.license_url}>(license)\n                </span>\n            </div>\n            <div className=\"addon-settings-controls\">\n                <button onClick={() => {\n                    props.onAdd(props.id, props.url, props.checksum)\n                }} id=\"addon-install-calendar\" className=\"text-button addon-discovery-settings-add\"\n                        data-l10n-id=\"addon-discovery-add\"><Trans>add</Trans>\n                </button>\n            </div>\n        </li>\n    )\n}\n\n\nexport default Addon;\n\n","/Users/liuguilin/Desktop/web-things/gateway/gateway-app/src/api/index.js",[],"/Users/liuguilin/Desktop/web-things/gateway/gateway-app/src/util.js",["123"],"const Utils = {\n\n\n    sortCapabilities: (capabilities) => {\n        // copy the array, as we're going to sort in place.\n        const list = capabilities.slice();\n\n        const priority = [\n            'Lock',\n            'Thermostat',\n            'VideoCamera',\n            'Camera',\n            'SmartPlug',\n            'Light',\n            'MultiLevelSwitch',\n            'OnOffSwitch',\n            'ColorControl',\n            'ColorSensor',\n            'EnergyMonitor',\n            'DoorSensor',\n            'MotionSensor',\n            'LeakSensor',\n            'SmokeSensor',\n            'PushButton',\n            'TemperatureSensor',\n            'HumiditySensor',\n            'MultiLevelSensor',\n            'Alarm',\n            'BinarySensor',\n            'BarometricPressureSensor',\n            'AirQualitySensor',\n        ];\n\n        list.sort((a, b) => {\n            if (!priority.includes(a) && !priority.includes(b)) {\n                return 0;\n            } else if (!priority.includes(a)) {\n                return 1;\n            } else if (!priority.includes(b)) {\n                return -1;\n            }\n\n            return priority.indexOf(a) - priority.indexOf(b);\n        });\n\n        return list;\n    },\n\n    getClassFromCapability: (capability) => {\n        switch (capability) {\n\n            case 'Custom':\n                return 'custom-thing';\n            case 'OnOffSwitch':\n                return 'on-off-switch';\n            case 'MultiLevelSwitch':\n                return 'multi-level-switch';\n            case 'ColorControl':\n                return 'color-control';\n            case 'ColorSensor':\n                return 'color-sensor';\n            case 'EnergyMonitor':\n                return 'energy-monitor';\n            case 'BinarySensor':\n                return 'binary-sensor';\n            case 'MultiLevelSensor':\n                return 'multi-level-sensor';\n            case 'SmartPlug':\n                return 'smart-plug';\n            case 'Light':\n                return 'light';\n            case 'DoorSensor':\n                return 'door-sensor';\n            case 'MotionSensor':\n                return 'motion-sensor';\n            case 'LeakSensor':\n                return 'leak-sensor';\n            case 'SmokeSensor':\n                return 'smoke-sensor';\n            case 'PushButton':\n                return 'push-button';\n            case 'VideoCamera':\n                return 'video-camera';\n            case 'Camera':\n                return 'camera';\n            case 'TemperatureSensor':\n                return 'temperature-sensor';\n            case 'HumiditySensor':\n                return 'humidity-sensor';\n            case 'Alarm':\n                return 'alarm';\n            case 'Thermostat':\n                return 'thermostat';\n            case 'Lock':\n                return 'lock';\n            case 'BarometricPressureSensor':\n                return 'barometric-pressure-sensor';\n            case 'AirQualitySensor':\n                return 'air-quality-sensor';\n        }\n\n        return '';\n    }\n\n}\n\n\n\n\nmodule.exports = Utils\n","/Users/liuguilin/Desktop/web-things/gateway/gateway-app/src/components/capability/light.js",["124"],"import React from \"react\";\nimport OnOffProperty from \"../property/on-off\"\nimport BrightnessProperty from \"../property/brightness\"\nimport {SvgIcon} from \"@material-ui/core\";\nimport {green, yellow} from \"@material-ui/core/colors\";\n\nconst Light = (props) => {\n\n\n    function renderProperty() {\n        const list = []\n        for (const prop in props.thing.properties) {\n            if (props.thing.properties.hasOwnProperty(prop)) {\n                const p = props.thing.properties[prop]\n                if (p.hasOwnProperty(\"@type\")) {\n                    let type = p[\"@type\"]\n                    if (type === \"OnOffProperty\") {\n                        const propComponent =\n                            <OnOffProperty data={p} key={p.name} >\n                            </OnOffProperty>\n\n                        list.push(propComponent)\n                    }\n                    if (type === \"BrightnessProperty\") {\n                        const propComponent =\n                            <BrightnessProperty data={p} key={p.name} >\n                            </BrightnessProperty>\n\n                        list.push(propComponent)\n                    }\n                }\n            }\n        }\n        return list\n    }\n\n    return (\n        <>\n            <h1>{props.thing.title}</h1>\n            {props.thing.properties.on.value && <LightOnIcon/>}\n            {!props.thing.properties.on.value && <LightOffIcon/>}\n            {renderProperty()}\n        </>\n    )\n\n}\n\n\nexport default Light\n\n\nfunction LightOnIcon(props) {\n    return (\n        <SvgIcon style={{fontSize: 40}} {...props}>\n            <path fill=\"currentColor\"\n                  d=\"M12,2A7,7 0 0,0 5,9C5,11.38 6.19,13.47 8,14.74V17A1,1 0 0,0 9,18H15A1,1 0 0,0 16,17V14.74C17.81,13.47 19,11.38 19,9A7,7 0 0,0 12,2M9,21A1,1 0 0,0 10,22H14A1,1 0 0,0 15,21V20H9V21Z\"/>\n        </SvgIcon>\n    );\n}\n\nfunction LightOffIcon(props) {\n    return (\n        <SvgIcon style={{fontSize: 40, color: yellow[900]}} {...props}>\n            <path fill=\"currentColor\"\n                  d=\"M12,2A7,7 0 0,0 5,9C5,11.38 6.19,13.47 8,14.74V17A1,1 0 0,0 9,18H15A1,1 0 0,0 16,17V14.74C17.81,13.47 19,11.38 19,9A7,7 0 0,0 12,2M9,21A1,1 0 0,0 10,22H14A1,1 0 0,0 15,21V20H9V21Z\"/>\n        </SvgIcon>\n    );\n}\n","/Users/liuguilin/Desktop/web-things/gateway/gateway-app/src/components/property/brightness.js",[],"/Users/liuguilin/Desktop/web-things/gateway/gateway-app/src/components/property/on-off.js",["125","126"],"import React, {useContext} from \"react\";\nimport Switch from '@material-ui/core/Switch';\nimport {ThingContext} from \"../../views/home\";\n\nconst OnOffProperty = (props) => {\n\n    const {name, value} = props\n\n    const {setPropertyValue} = useContext(ThingContext)\n\n    const [state, setState] = React.useState(props.data);\n\n    const handleChange = (event) => {\n        setState({...state, value: !event.target.checked})\n        setPropertyValue(state)\n    };\n\n\n    return (\n        <>\n            <div id={\"property-item\"} className={\"property-on-off-switch\"}>\n                <Switch\n                    checked={!state.value}\n                    onChange={handleChange}\n                    color=\"primary\"\n                    name=\"on-off-switch\"\n                    inputProps={{'aria-label': 'primary checkbox'}}\n                />\n            </div>\n        </>\n    )\n}\n\nexport default OnOffProperty\n",{"ruleId":"127","replacedBy":"128"},{"ruleId":"129","replacedBy":"130"},{"ruleId":"131","severity":1,"message":"132","line":36,"column":9,"nodeType":"133","messageId":"134","endLine":36,"endColumn":20},{"ruleId":"131","severity":1,"message":"135","line":53,"column":11,"nodeType":"133","messageId":"134","endLine":53,"endColumn":27},{"ruleId":"131","severity":1,"message":"136","line":65,"column":17,"nodeType":"133","messageId":"134","endLine":65,"endColumn":22},{"ruleId":"131","severity":1,"message":"137","line":67,"column":17,"nodeType":"133","messageId":"134","endLine":67,"endColumn":21},{"ruleId":"138","severity":1,"message":"139","line":102,"column":12,"nodeType":"140","endLine":102,"endColumn":25,"suggestions":"141"},{"ruleId":"127","replacedBy":"128"},{"ruleId":"129","replacedBy":"130"},{"ruleId":"142","severity":1,"message":"143","line":2,"column":16,"nodeType":"133","messageId":"134","endLine":2,"endColumn":30},{"ruleId":"142","severity":1,"message":"144","line":44,"column":11,"nodeType":"133","messageId":"134","endLine":44,"endColumn":21},{"ruleId":"131","severity":1,"message":"145","line":11,"column":9,"nodeType":"133","messageId":"134","endLine":11,"endColumn":16},{"ruleId":"131","severity":1,"message":"146","line":31,"column":23,"nodeType":"133","messageId":"134","endLine":31,"endColumn":35},{"ruleId":"131","severity":1,"message":"135","line":54,"column":11,"nodeType":"133","messageId":"134","endLine":54,"endColumn":27},{"ruleId":"138","severity":1,"message":"147","line":64,"column":9,"nodeType":"140","endLine":64,"endColumn":11,"suggestions":"148"},{"ruleId":"138","severity":1,"message":"149","line":85,"column":12,"nodeType":"140","endLine":85,"endColumn":14,"suggestions":"150"},{"ruleId":"131","severity":1,"message":"151","line":45,"column":12,"nodeType":"133","messageId":"134","endLine":45,"endColumn":29},{"ruleId":"131","severity":1,"message":"152","line":45,"column":31,"nodeType":"133","messageId":"134","endLine":45,"endColumn":50},{"ruleId":"138","severity":1,"message":"153","line":187,"column":8,"nodeType":"140","endLine":187,"endColumn":10,"suggestions":"154"},{"ruleId":"131","severity":1,"message":"155","line":1,"column":8,"nodeType":"133","messageId":"134","endLine":1,"endColumn":13},{"ruleId":"138","severity":1,"message":"156","line":23,"column":12,"nodeType":"140","endLine":23,"endColumn":14,"suggestions":"157"},{"ruleId":"131","severity":1,"message":"158","line":26,"column":11,"nodeType":"133","messageId":"134","endLine":26,"endColumn":31},{"ruleId":"131","severity":1,"message":"159","line":7,"column":9,"nodeType":"133","messageId":"134","endLine":7,"endColumn":16},{"ruleId":"131","severity":1,"message":"160","line":26,"column":13,"nodeType":"133","messageId":"134","endLine":26,"endColumn":17},{"ruleId":"161","severity":1,"message":"162","line":25,"column":46,"nodeType":"163","endLine":25,"endColumn":61},{"ruleId":"161","severity":1,"message":"162","line":30,"column":50,"nodeType":"163","endLine":30,"endColumn":65},{"ruleId":"164","severity":1,"message":"165","line":50,"column":9,"nodeType":"166","messageId":"167","endLine":100,"endColumn":10},{"ruleId":"131","severity":1,"message":"168","line":5,"column":9,"nodeType":"133","messageId":"134","endLine":5,"endColumn":14},{"ruleId":"131","severity":1,"message":"169","line":7,"column":12,"nodeType":"133","messageId":"134","endLine":7,"endColumn":16},{"ruleId":"131","severity":1,"message":"170","line":7,"column":18,"nodeType":"133","messageId":"134","endLine":7,"endColumn":23},"no-native-reassign",["171"],"no-negated-in-lhs",["172"],"no-unused-vars","'sendMessage' is assigned a value but never used.","Identifier","unusedVar","'connectionStatus' is assigned a value but never used.","'proto' is assigned a value but never used.","'host' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'availableThings'. Either include it or remove the dependency array. You can also do a functional update 'setAvailableThings(a => ...)' if you only need 'availableThings' in the 'setAvailableThings' call.","ArrayExpression",["173"],"@typescript-eslint/no-unused-vars","'useTranslation' is defined but never used.","'MenuHidden' is assigned a value but never used.","'spacing' is defined but never used.","'setSocketUrl' is assigned a value but never used.","React Hook useCallback has a missing dependency: 'sendMessage'. Either include it or remove the dependency array.",["174"],"React Hook useEffect has a missing dependency: 'thingsContext'. Either include it or remove the dependency array.",["175"],"'currentAddonsList' is assigned a value but never used.","'setCurrentAddonList' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'fetchAvailableAddonList'. Either include it or remove the dependency array.",["176"],"'React' is defined but never used.","React Hook useCallback has missing dependencies: 'handleSendMessage' and 'props.thing.id'. Either include them or remove the dependency array.",["177"],"'propertyValueChanged' is assigned a value but never used.","'classes' is defined but never used.","'i18n' is assigned a value but never used.","react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" is a security risk: see https://html.spec.whatwg.org/multipage/links.html#link-type-noopener","JSXAttribute","default-case","Expected a default case.","SwitchStatement","missingDefaultCase","'green' is defined but never used.","'name' is assigned a value but never used.","'value' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"178","fix":"179"},{"desc":"180","fix":"181"},{"desc":"182","fix":"183"},{"desc":"184","fix":"185"},{"desc":"186","fix":"187"},"Update the dependencies array to be: [availableThings, lastMessage]",{"range":"188","text":"189"},"Update the dependencies array to be: [sendMessage]",{"range":"190","text":"191"},"Update the dependencies array to be: [thingsContext]",{"range":"192","text":"193"},"Update the dependencies array to be: [fetchAvailableAddonList]",{"range":"194","text":"195"},"Update the dependencies array to be: [handleSendMessage, props.thing.id]",{"range":"196","text":"197"},[3243,3256],"[availableThings, lastMessage]",[1947,1949],"[sendMessage]",[2550,2552],"[thingsContext]",[6784,6786],"[fetchAvailableAddonList]",[799,801],"[handleSendMessage, props.thing.id]"]