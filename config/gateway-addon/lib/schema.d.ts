/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */
/**
 * The top-level message which encapsulates all message types
 */
export declare type Message = PluginRegisterRequest | PluginRegisterResponse | PluginUnloadRequest | PluginUnloadResponse | PluginErrorNotification | AdapterAddedNotification | AdapterCancelPairingCommand | AdapterCancelRemoveDeviceCommand | AdapterPairingPromptNotification | AdapterRemoveDeviceRequest | AdapterRemoveDeviceResponse | AdapterStartPairingCommand | AdapterUnloadRequest | AdapterUnloadResponse | AdapterUnpairingPromptNotification | DeviceActionStatusNotification | DeviceAddedNotification | DeviceConnectedStateNotification | DeviceDebugCommand | DeviceEventNotification | DevicePropertyChangedNotification | DeviceRemoveActionRequest | DeviceRemoveActionResponse | DeviceRequestActionRequest | DeviceRequestActionResponse | DeviceSetCredentialsRequest | DeviceSetCredentialsResponse | DeviceSetPINRequest | DeviceSetPINResponse | DeviceSetPropertyCommand | DeviceSavedNotification | NotifierAddedNotification | NotifierUnloadRequest | NotifierUnloadResponse | OutletAddedNotification | OutletNotifyRequest | OutletNotifyResponse | OutletRemovedNotification | APIHandlerAddedNotification | APIHandlerAPIRequest | APIHandlerAPIResponse | APIHandlerUnloadRequest | APIHandlerUnloadResponse | MockAdapterAddDeviceRequest | MockAdapterAddDeviceResponse | MockAdapterClearStateRequest | MockAdapterClearStateResponse | MockAdapterPairDeviceCommand | MockAdapterRemoveDeviceRequest | MockAdapterRemoveDeviceResponse | MockAdapterUnpairDeviceCommand;
/**
 * The message type, used by the IPC client and server to differentiate messages
 */
export declare type MessageType = number;
/**
 * ID of the plugin being registered
 */
export declare type PluginID = string;
/**
 * The message type, used by the IPC client and server to differentiate messages
 */
export declare type MessageType1 = number;
/**
 * ID of the plugin which has been registered
 */
export declare type PluginID1 = string;
/**
 * Version of the running gateway
 */
export declare type GatewayVersion = string;
/**
 * Add-ons directory, e.g. "/home/pi/.webthings/addons"
 */
export declare type AddOnsDirectory = string;
/**
 * Base user profile directory, e.g. "/home/pi/.webthings"
 */
export declare type BaseDirectory = string;
/**
 * Configuration directory, e.g. "/home/pi/.webthings/config"
 */
export declare type ConfigurationDirectory = string;
/**
 * Data directory, e.g. "/home/pi/.webthings/data"
 */
export declare type DataDirectory = string;
/**
 * Media directory, e.g. "/home/pi/.webthings/media"
 */
export declare type MediaDirectory = string;
/**
 * Log directory, e.g. "/home/pi/.webthings/log"
 */
export declare type LogDirectory = string;
/**
 * Gateway directory, e.g. "/home/pi/webthings/gateway"
 */
export declare type GatewayDirectory = string;
/**
 * User's preferred language, e.g. "en-US"
 */
export declare type Language = string;
/**
 * Preferred temperature unit, e.g. "degree celsius"
 */
export declare type Temperature = string;
/**
 * The message type, used by the IPC client and server to differentiate messages
 */
export declare type MessageType2 = number;
/**
 * ID of the plugin being unloaded
 */
export declare type PluginID2 = string;
/**
 * The message type, used by the IPC client and server to differentiate messages
 */
export declare type MessageType3 = number;
/**
 * ID of the plugin which has been unloaded
 */
export declare type PluginID3 = string;
/**
 * The message type, used by the IPC client and server to differentiate messages
 */
export declare type MessageType4 = number;
/**
 * ID of the plugin which has had an error
 */
export declare type PluginID4 = string;
/**
 * Error message
 */
export declare type ErrorMessage = string;
/**
 * The message type, used by the IPC client and server to differentiate messages
 */
export declare type MessageType5 = number;
/**
 * ID of the plugin
 */
export declare type PluginID5 = string;
/**
 * ID of the new adapter
 */
export declare type AdapterID = string;
/**
 * Name of the new adapter
 */
export declare type Name = string;
/**
 * Name of the add-on package
 */
export declare type PackageName = string;
/**
 * The message type, used by the IPC client and server to differentiate messages
 */
export declare type MessageType6 = number;
/**
 * ID of the plugin
 */
export declare type PluginID6 = string;
/**
 * ID of the adapter
 */
export declare type AdapterID1 = string;
/**
 * The message type, used by the IPC client and server to differentiate messages
 */
export declare type MessageType7 = number;
/**
 * ID of the plugin
 */
export declare type PluginID7 = string;
/**
 * ID of the adapter
 */
export declare type AdapterID2 = string;
/**
 * ID of the device which is being removed
 */
export declare type DeviceID = string;
/**
 * The message type, used by the IPC client and server to differentiate messages
 */
export declare type MessageType8 = number;
/**
 * ID of the plugin
 */
export declare type PluginID8 = string;
/**
 * ID of the adapter
 */
export declare type AdapterID3 = string;
/**
 * The message to present to the user
 */
export declare type Prompt = string;
/**
 * URL of a web page containing more information
 */
export declare type URL = string;
/**
 * ID of specific device the prompt pertains to
 */
export declare type DeviceID1 = string;
/**
 * The message type, used by the IPC client and server to differentiate messages
 */
export declare type MessageType9 = number;
/**
 * ID of the plugin
 */
export declare type PluginID9 = string;
/**
 * ID of the adapter
 */
export declare type AdapterID4 = string;
/**
 * ID of the device to remove
 */
export declare type DeviceID2 = string;
/**
 * The message type, used by the IPC client and server to differentiate messages
 */
export declare type MessageType10 = number;
/**
 * ID of the plugin
 */
export declare type PluginID10 = string;
/**
 * ID of the adapter
 */
export declare type AdapterID5 = string;
/**
 * ID of the device which has been removed
 */
export declare type DeviceID3 = string;
/**
 * The message type, used by the IPC client and server to differentiate messages
 */
export declare type MessageType11 = number;
/**
 * ID of the plugin
 */
export declare type PluginID11 = string;
/**
 * ID of the adapter
 */
export declare type AdapterID6 = string;
/**
 * Number of seconds to run the pairing process before timing out
 */
export declare type Timeout = number;
/**
 * The message type, used by the IPC client and server to differentiate messages
 */
export declare type MessageType12 = number;
/**
 * ID of the plugin
 */
export declare type PluginID12 = string;
/**
 * ID of the adapter
 */
export declare type AdapterID7 = string;
/**
 * The message type, used by the IPC client and server to differentiate messages
 */
export declare type MessageType13 = number;
/**
 * ID of the plugin
 */
export declare type PluginID13 = string;
/**
 * ID of the adapter
 */
export declare type AdapterID8 = string;
/**
 * The message type, used by the IPC client and server to differentiate messages
 */
export declare type MessageType14 = number;
/**
 * ID of the plugin
 */
export declare type PluginID14 = string;
/**
 * ID of the adapter
 */
export declare type AdapterID9 = string;
/**
 * The message to present to the user
 */
export declare type Prompt1 = string;
/**
 * URL of a web page containing more information
 */
export declare type URL1 = string;
/**
 * ID of specific device the prompt pertains to
 */
export declare type DeviceID4 = string;
/**
 * The message type, used by the IPC client and server to differentiate messages
 */
export declare type MessageType15 = number;
/**
 * ID of the plugin
 */
export declare type PluginID15 = string;
/**
 * ID of the adapter
 */
export declare type AdapterID10 = string;
/**
 * ID of the device
 */
export declare type DeviceID5 = string;
/**
 * ID of the Action
 */
export declare type ActionID = string;
/**
 * Name of the Action
 */
export declare type ActionName = string;
export declare type Any = null | boolean | {
    [k: string]: unknown;
} | unknown[] | number | string;
/**
 * Status of the Action
 */
export declare type ActionStatus = string;
/**
 * Request time of the Action
 */
export declare type ActionRequestTime = string;
/**
 * Completion time of the Action
 */
export declare type ActionCompletionTime = string;
/**
 * The message type, used by the IPC client and server to differentiate messages
 */
export declare type MessageType16 = number;
/**
 * ID of the plugin
 */
export declare type PluginID16 = string;
/**
 * ID of the adapter
 */
export declare type AdapterID11 = string;
/**
 * Context of the device
 */
export declare type DeviceContext = string;
/**
 * Types of the device
 */
export declare type DeviceTypes = string;
/**
 * ID of the device
 */
export declare type DeviceID6 = string;
/**
 * Title of the Device
 */
export declare type DeviceTitle = string;
/**
 * Description of the device
 */
export declare type DeviceDescription = string;
/**
 * The type of the property
 */
export declare type PropertyType = string;
/**
 * The name of the property
 */
export declare type PropertyName = string;
/**
 * The title of the property
 */
export declare type PropertyTitle = string;
/**
 * Description of the property
 */
export declare type PropertyDescription = string;
/**
 * The href of the link
 */
export declare type LinkHref = string;
/**
 * The type of the relationship
 */
export declare type LinkRel = string;
/**
 * The media type of the link
 */
export declare type LinkMediaType = string;
/**
 * The type of the property value
 */
export declare type PropertyValueType = "null" | "boolean" | "object" | "array" | "number" | "integer" | "string";
/**
 * The unit of the property
 */
export declare type PropertyUnit = string;
/**
 * The minimum value of the property
 */
export declare type PropertyMinimumValue = number;
/**
 * The maximum value of the property
 */
export declare type PropertyMaximumValue = number;
/**
 * The precision of the value
 */
export declare type PropertyValuePrecision = number;
/**
 * The possible values of the property
 */
export declare type PropertyValuesEnum = null | boolean | {
    [k: string]: unknown;
} | unknown[] | number | string;
/**
 * If the property is read-only
 */
export declare type PropertyReadOnly = boolean;
/**
 * If the property is visible
 */
export declare type PropertyVisible = boolean;
/**
 * The value of the property
 */
export declare type PropertyValue = null | boolean | {
    [k: string]: unknown;
} | unknown[] | number | string;
/**
 * The type of the action
 */
export declare type ActionType = string;
/**
 * The title of the Action
 */
export declare type ActionTitle = string;
/**
 * Description of the Action
 */
export declare type ActionDescription1 = string;
export declare type ActionInput = ObjectActionInput | ActionInputProperty;
/**
 * The type of the input
 */
export declare type ObjectInputType = "object";
/**
 * The type of the input property
 */
export declare type InputPropertyType = string;
/**
 * The type of the input property value
 */
export declare type InputPropertyValueType = "null" | "boolean" | "object" | "array" | "number" | "integer" | "string";
/**
 * The unit of the input property
 */
export declare type InputPropertyUnit = string;
/**
 * The minimum value of the input property
 */
export declare type InputPropertyMinimumValue = number;
/**
 * The maximum value of the input property
 */
export declare type InputPropertyMaximumValue = number;
/**
 * The precision of the value
 */
export declare type InputPropertyValuePrecision = number;
/**
 * The possible values of the input property
 */
export declare type PropertyValuesEnum1 = null | boolean | {
    [k: string]: unknown;
} | unknown[] | number | string;
/**
 * The type of the event
 */
export declare type EventType = string;
/**
 * The name of the event
 */
export declare type EventName = string;
/**
 * The title of the event
 */
export declare type EventTitle = string;
/**
 * Description of the event
 */
export declare type EventDescription = string;
/**
 * The type of the event value
 */
export declare type EventValueType = "null" | "boolean" | "object" | "array" | "number" | "integer" | "string";
/**
 * The unit of the event
 */
export declare type EventUnit = string;
/**
 * The minimum value of the event
 */
export declare type EventMinimumValue = number;
/**
 * The maximum value of the event
 */
export declare type EventMaximumValue = number;
/**
 * The precision of the value
 */
export declare type EventValuePrecision = number;
/**
 * The possible values of the property
 */
export declare type PropertyValuesEnum2 = null | boolean | {
    [k: string]: unknown;
} | unknown[] | number | string;
/**
 * The base href of the device
 */
export declare type DeviceBaseHref = string;
/**
 * If the pin is required
 */
export declare type PinRequired = boolean;
/**
 * The pattern of the pin
 */
export declare type PinPattern = string;
/**
 * If credentials are required
 */
export declare type DeviceCredentialsRequired = boolean;
/**
 * The message type, used by the IPC client and server to differentiate messages
 */
export declare type MessageType17 = number;
/**
 * ID of the plugin
 */
export declare type PluginID17 = string;
/**
 * ID of the adapter
 */
export declare type AdapterID12 = string;
/**
 * ID of the device
 */
export declare type DeviceID7 = string;
/**
 * Whether or not the device is currently connected
 */
export declare type Connected = boolean;
/**
 * The message type, used by the IPC client and server to differentiate messages
 */
export declare type MessageType18 = number;
/**
 * ID of the plugin
 */
export declare type PluginID18 = string;
/**
 * ID of the adapter
 */
export declare type AdapterID13 = string;
/**
 * ID of the device
 */
export declare type DeviceID8 = string;
/**
 * Name of the command
 */
export declare type Command = string;
/**
 * Input to the command
 */
export declare type Params = null | boolean | {
    [k: string]: unknown;
} | unknown[] | number | string;
/**
 * The message type, used by the IPC client and server to differentiate messages
 */
export declare type MessageType19 = number;
/**
 * ID of the plugin
 */
export declare type PluginID19 = string;
/**
 * ID of the adapter
 */
export declare type AdapterID14 = string;
/**
 * ID of the device
 */
export declare type DeviceID9 = string;
/**
 * Name of the event
 */
export declare type EventName1 = string;
/**
 * Timestamp of the event
 */
export declare type EventTimestamp = string;
/**
 * The message type, used by the IPC client and server to differentiate messages
 */
export declare type MessageType20 = number;
/**
 * ID of the plugin
 */
export declare type PluginID20 = string;
/**
 * ID of the adapter
 */
export declare type AdapterID15 = string;
/**
 * ID of the device
 */
export declare type DeviceID10 = string;
/**
 * The message type, used by the IPC client and server to differentiate messages
 */
export declare type MessageType21 = number;
/**
 * ID of the plugin
 */
export declare type PluginID21 = string;
/**
 * ID of the adapter
 */
export declare type AdapterID16 = string;
/**
 * Unique ID of this message
 */
export declare type MessageID = number;
/**
 * ID of the device
 */
export declare type DeviceID11 = string;
/**
 * Name of the action
 */
export declare type ActionName1 = string;
/**
 * ID of the existing action
 */
export declare type ActionID1 = string;
/**
 * The message type, used by the IPC client and server to differentiate messages
 */
export declare type MessageType22 = number;
/**
 * ID of the plugin
 */
export declare type PluginID22 = string;
/**
 * ID of the adapter
 */
export declare type AdapterID17 = string;
/**
 * ID of the device
 */
export declare type DeviceID12 = string;
/**
 * ID of the request message
 */
export declare type MessageID1 = number;
/**
 * Name of the action
 */
export declare type ActionName2 = string;
/**
 * ID of the action
 */
export declare type ActionID2 = string;
/**
 * Whether or not the operation was successful
 */
export declare type Success = boolean;
/**
 * The message type, used by the IPC client and server to differentiate messages
 */
export declare type MessageType23 = number;
/**
 * ID of the plugin
 */
export declare type PluginID23 = string;
/**
 * ID of the adapter
 */
export declare type AdapterID18 = string;
/**
 * ID of the device
 */
export declare type DeviceID13 = string;
/**
 * Name of the action
 */
export declare type ActionName3 = string;
/**
 * Unique ID of this existing action
 */
export declare type ActionID3 = string;
/**
 * Input to the action
 */
export declare type Input = null | boolean | {
    [k: string]: unknown;
} | unknown[] | number | string;
/**
 * The message type, used by the IPC client and server to differentiate messages
 */
export declare type MessageType24 = number;
/**
 * ID of the plugin
 */
export declare type PluginID24 = string;
/**
 * ID of the adapter
 */
export declare type AdapterID19 = string;
/**
 * ID of the device
 */
export declare type DeviceID14 = string;
/**
 * Name of the action
 */
export declare type ActionName4 = string;
/**
 * ID of the action
 */
export declare type ActionID4 = string;
/**
 * Whether or not the operation was successful
 */
export declare type Success1 = boolean;
/**
 * The message type, used by the IPC client and server to differentiate messages
 */
export declare type MessageType25 = number;
/**
 * ID of the plugin
 */
export declare type PluginID25 = string;
/**
 * ID of the adapter
 */
export declare type AdapterID20 = string;
/**
 * Unique ID of this message
 */
export declare type MessageID2 = number;
/**
 * ID of the device
 */
export declare type DeviceID15 = string;
/**
 * Username to set
 */
export declare type Username = string;
/**
 * Password to set
 */
export declare type Password = string;
/**
 * The message type, used by the IPC client and server to differentiate messages
 */
export declare type MessageType26 = number;
/**
 * ID of the plugin
 */
export declare type PluginID26 = string;
/**
 * ID of the adapter
 */
export declare type AdapterID21 = string;
/**
 * ID of the request message
 */
export declare type MessageID3 = number;
/**
 * Whether or not the operation was successful
 */
export declare type Success2 = boolean;
/**
 * ID of the device
 */
export declare type DeviceID16 = string;
/**
 * The message type, used by the IPC client and server to differentiate messages
 */
export declare type MessageType27 = number;
/**
 * ID of the plugin
 */
export declare type PluginID27 = string;
/**
 * ID of the adapter
 */
export declare type AdapterID22 = string;
/**
 * Unique ID of this message
 */
export declare type MessageID4 = number;
/**
 * ID of the device
 */
export declare type DeviceID17 = string;
/**
 * PIN to set
 */
export declare type PIN = string;
/**
 * The message type, used by the IPC client and server to differentiate messages
 */
export declare type MessageType28 = number;
/**
 * ID of the plugin
 */
export declare type PluginID28 = string;
/**
 * ID of the adapter
 */
export declare type AdapterID23 = string;
/**
 * ID of the request message
 */
export declare type MessageID5 = number;
/**
 * Whether or not the operation was successful
 */
export declare type Success3 = boolean;
/**
 * ID of the device
 */
export declare type DeviceID18 = string;
/**
 * The message type, used by the IPC client and server to differentiate messages
 */
export declare type MessageType29 = number;
/**
 * ID of the plugin
 */
export declare type PluginID29 = string;
/**
 * ID of the adapter
 */
export declare type AdapterID24 = string;
/**
 * ID of the device
 */
export declare type DeviceID19 = string;
/**
 * Name of the property to set
 */
export declare type PropertyName1 = string;
/**
 * New value of the property
 */
export declare type PropertyValue1 = null | boolean | {
    [k: string]: unknown;
} | unknown[] | number | string;
/**
 * The message type, used by the IPC client and server to differentiate messages
 */
export declare type MessageType30 = number;
/**
 * ID of the plugin
 */
export declare type PluginID30 = string;
/**
 * ID of the adapter
 */
export declare type AdapterID25 = string;
/**
 * ID of the device
 */
export declare type DeviceID20 = string;
/**
 * Context of the device
 */
export declare type DeviceContext1 = string;
/**
 * Types of the device
 */
export declare type DeviceTypes1 = string;
/**
 * Title of the Device
 */
export declare type DeviceTitle1 = string;
/**
 * Description of the device
 */
export declare type DeviceDescription1 = string;
/**
 * The base href of the device
 */
export declare type DeviceBaseHref1 = string;
/**
 * If credentials are required
 */
export declare type DeviceCredentialsRequired1 = boolean;
/**
 * The message type, used by the IPC client and server to differentiate messages
 */
export declare type MessageType31 = number;
/**
 * ID of the plugin
 */
export declare type PluginID31 = string;
/**
 * ID of the new notifier
 */
export declare type NotifierID = string;
/**
 * Name of the new notifier
 */
export declare type Name1 = string;
/**
 * Name of the add-on package
 */
export declare type PackageName1 = string;
/**
 * The message type, used by the IPC client and server to differentiate messages
 */
export declare type MessageType32 = number;
/**
 * ID of the plugin
 */
export declare type PluginID32 = string;
/**
 * ID of the notifier
 */
export declare type NotifierID1 = string;
/**
 * The message type, used by the IPC client and server to differentiate messages
 */
export declare type MessageType33 = number;
/**
 * ID of the plugin
 */
export declare type PluginID33 = string;
/**
 * ID of the notifier
 */
export declare type NotifierID2 = string;
/**
 * The message type, used by the IPC client and server to differentiate messages
 */
export declare type MessageType34 = number;
/**
 * ID of the plugin
 */
export declare type PluginID34 = string;
/**
 * ID of the notifier
 */
export declare type NotifierID3 = string;
/**
 * ID of the Outlet
 */
export declare type OutletID = string;
/**
 * Name of the Outlet
 */
export declare type OutletName = string;
/**
 * The message type, used by the IPC client and server to differentiate messages
 */
export declare type MessageType35 = number;
/**
 * ID of the plugin
 */
export declare type PluginID35 = string;
/**
 * ID of the notifier
 */
export declare type NotifierID4 = string;
/**
 * ID of the outlet
 */
export declare type OutletID1 = string;
/**
 * Unique ID of this message
 */
export declare type MessageID6 = number;
/**
 * Title of the notification
 */
export declare type Title = string;
/**
 * Message of the notification
 */
export declare type NotificationMessage = string;
/**
 * Priority level of the notification, 0 being the lowest priority
 */
export declare type Level = 0 | 1 | 2;
/**
 * The message type, used by the IPC client and server to differentiate messages
 */
export declare type MessageType36 = number;
/**
 * ID of the plugin
 */
export declare type PluginID36 = string;
/**
 * ID of the notifier
 */
export declare type NotifierID5 = string;
/**
 * ID of the outlet
 */
export declare type OutletID2 = string;
/**
 * ID of the request message
 */
export declare type MessageID7 = number;
/**
 * Whether or not the operation was successful
 */
export declare type Success4 = boolean;
/**
 * The message type, used by the IPC client and server to differentiate messages
 */
export declare type MessageType37 = number;
/**
 * ID of the plugin
 */
export declare type PluginID37 = string;
/**
 * ID of the notifier
 */
export declare type NotifierID6 = string;
/**
 * ID of the outlet which was removed
 */
export declare type OutletID3 = string;
/**
 * The message type, used by the IPC client and server to differentiate messages
 */
export declare type MessageType38 = number;
/**
 * ID of the plugin
 */
export declare type PluginID38 = string;
/**
 * Name of the add-on package
 */
export declare type PackageName2 = string;
/**
 * The message type, used by the IPC client and server to differentiate messages
 */
export declare type MessageType39 = number;
/**
 * ID of the plugin
 */
export declare type PluginID39 = string;
/**
 * Name of the add-on package
 */
export declare type PackageName3 = string;
/**
 * Unique ID of this message
 */
export declare type MessageID8 = number;
/**
 * HTTP method of the request
 */
export declare type Method = string;
/**
 * Request path, relative to this handler
 */
export declare type Path = string;
/**
 * The message type, used by the IPC client and server to differentiate messages
 */
export declare type MessageType40 = number;
/**
 * ID of the plugin
 */
export declare type PluginID40 = string;
/**
 * Name of the add-on package
 */
export declare type PackageName4 = string;
/**
 * ID of the request message
 */
export declare type MessageID9 = number;
/**
 * HTTP status code
 */
export declare type Status = number;
/**
 * Content-Type of the response body
 */
export declare type ContentType = null | string;
/**
 * Body content
 */
export declare type Content = null | string;
/**
 * The message type, used by the IPC client and server to differentiate messages
 */
export declare type MessageType41 = number;
/**
 * ID of the plugin
 */
export declare type PluginID41 = string;
/**
 * Name of the add-on package
 */
export declare type PackageName5 = string;
/**
 * The message type, used by the IPC client and server to differentiate messages
 */
export declare type MessageType42 = number;
/**
 * ID of the plugin
 */
export declare type PluginID42 = string;
/**
 * Name of the add-on package
 */
export declare type PackageName6 = string;
/**
 * The message type, used by the IPC client and server to differentiate messages
 */
export declare type MessageType43 = number;
/**
 * ID of the plugin
 */
export declare type PluginID43 = string;
/**
 * ID of the adapter
 */
export declare type AdapterID26 = string;
/**
 * ID of the new device
 */
export declare type DeviceID21 = string;
/**
 * The message type, used by the IPC client and server to differentiate messages
 */
export declare type MessageType44 = number;
/**
 * ID of the plugin
 */
export declare type PluginID44 = string;
/**
 * ID of the adapter
 */
export declare type AdapterID27 = string;
/**
 * Whether or not the operation was successful
 */
export declare type Success5 = boolean;
/**
 * ID of the new device
 */
export declare type DeviceID22 = string;
/**
 * Error message in the case of failure
 */
export declare type Error = string;
/**
 * The message type, used by the IPC client and server to differentiate messages
 */
export declare type MessageType45 = number;
/**
 * ID of the plugin
 */
export declare type PluginID45 = string;
/**
 * ID of the adapter
 */
export declare type AdapterID28 = string;
/**
 * The message type, used by the IPC client and server to differentiate messages
 */
export declare type MessageType46 = number;
/**
 * ID of the plugin
 */
export declare type PluginID46 = string;
/**
 * ID of the adapter
 */
export declare type AdapterID29 = string;
/**
 * The message type, used by the IPC client and server to differentiate messages
 */
export declare type MessageType47 = number;
/**
 * ID of the plugin
 */
export declare type PluginID47 = string;
/**
 * ID of the adapter
 */
export declare type AdapterID30 = string;
/**
 * ID of the device
 */
export declare type DeviceID23 = string;
/**
 * The message type, used by the IPC client and server to differentiate messages
 */
export declare type MessageType48 = number;
/**
 * ID of the plugin
 */
export declare type PluginID48 = string;
/**
 * ID of the adapter
 */
export declare type AdapterID31 = string;
/**
 * ID of the device
 */
export declare type DeviceID24 = string;
/**
 * The message type, used by the IPC client and server to differentiate messages
 */
export declare type MessageType49 = number;
/**
 * ID of the plugin
 */
export declare type PluginID49 = string;
/**
 * ID of the adapter
 */
export declare type AdapterID32 = string;
/**
 * Whether or not the operation was successful
 */
export declare type Success6 = boolean;
/**
 * ID of the device
 */
export declare type DeviceID25 = string;
/**
 * Error message in the case of failure
 */
export declare type Error1 = string;
/**
 * The message type, used by the IPC client and server to differentiate messages
 */
export declare type MessageType50 = number;
/**
 * ID of the plugin
 */
export declare type PluginID50 = string;
/**
 * ID of the adapter
 */
export declare type AdapterID33 = string;
/**
 * ID of the device
 */
export declare type DeviceID26 = string;
/**
 * IPC messages between WebThings Gateway and add-ons
 */
export interface AddOnIPC {
    message: Message;
    [k: string]: unknown;
}
/**
 * Register a plugin with the gateway
 */
export interface PluginRegisterRequest {
    messageType: MessageType;
    data: PluginRegisterRequestMessageData;
    [k: string]: unknown;
}
/**
 * Message-specific data
 */
export interface PluginRegisterRequestMessageData {
    pluginId: PluginID;
    [k: string]: unknown;
}
/**
 * Acknowledgement that the gateway has registered a plugin
 */
export interface PluginRegisterResponse {
    messageType: MessageType1;
    data: PluginRegisterResponseMessageData;
    [k: string]: unknown;
}
/**
 * Message-specific data
 */
export interface PluginRegisterResponseMessageData {
    pluginId: PluginID1;
    gatewayVersion: GatewayVersion;
    userProfile: UserProfile;
    preferences: Preferences;
    [k: string]: unknown;
}
/**
 * User profile information, e.g. file paths of various things
 */
export interface UserProfile {
    addonsDir: AddOnsDirectory;
    baseDir: BaseDirectory;
    configDir: ConfigurationDirectory;
    dataDir: DataDirectory;
    mediaDir: MediaDirectory;
    logDir: LogDirectory;
    gatewayDir: GatewayDirectory;
    [k: string]: unknown;
}
/**
 * User preferences
 */
export interface Preferences {
    language: Language;
    units: Units;
    [k: string]: unknown;
}
/**
 * User's preferred units
 */
export interface Units {
    temperature: Temperature;
    [k: string]: unknown;
}
/**
 * Unload a plugin from the gateway
 */
export interface PluginUnloadRequest {
    messageType: MessageType2;
    data: PluginUnloadRequestMessageData;
    [k: string]: unknown;
}
/**
 * Message-specific data
 */
export interface PluginUnloadRequestMessageData {
    pluginId: PluginID2;
    [k: string]: unknown;
}
/**
 * Notification that a plugin has been unloaded
 */
export interface PluginUnloadResponse {
    messageType: MessageType3;
    data: PluginUnloadResponseMessageData;
    [k: string]: unknown;
}
/**
 * Message-specific data
 */
export interface PluginUnloadResponseMessageData {
    pluginId: PluginID3;
    [k: string]: unknown;
}
/**
 * Notification that a plugin has encountered an error while loading
 */
export interface PluginErrorNotification {
    messageType: MessageType4;
    data: PluginErrorNotificationMessageData;
    [k: string]: unknown;
}
/**
 * Message-specific data
 */
export interface PluginErrorNotificationMessageData {
    pluginId: PluginID4;
    message: ErrorMessage;
    [k: string]: unknown;
}
/**
 * Notification that a plugin has added an adapter
 */
export interface AdapterAddedNotification {
    messageType: MessageType5;
    data: AdapterAddedNotificationMessageData;
    [k: string]: unknown;
}
/**
 * Message-specific data
 */
export interface AdapterAddedNotificationMessageData {
    pluginId: PluginID5;
    adapterId: AdapterID;
    name: Name;
    packageName: PackageName;
    [k: string]: unknown;
}
/**
 * Tell an adapter to cancel the pairing process
 */
export interface AdapterCancelPairingCommand {
    messageType: MessageType6;
    data: AdapterCancelPairingCommandMessageData;
    [k: string]: unknown;
}
/**
 * Message-specific data
 */
export interface AdapterCancelPairingCommandMessageData {
    pluginId: PluginID6;
    adapterId: AdapterID1;
    [k: string]: unknown;
}
/**
 * Tell an adapter to cancel the removal of a device
 */
export interface AdapterCancelRemoveDeviceCommand {
    messageType: MessageType7;
    data: AdapterCancelRemoveDeviceCommandMessageData;
    [k: string]: unknown;
}
/**
 * Message-specific data
 */
export interface AdapterCancelRemoveDeviceCommandMessageData {
    pluginId: PluginID7;
    adapterId: AdapterID2;
    deviceId: DeviceID;
    [k: string]: unknown;
}
/**
 * Notification that a prompt should be presented to the user while pairing
 */
export interface AdapterPairingPromptNotification {
    messageType: MessageType8;
    data: AdapterPairingPromptNotificationMessageData;
    [k: string]: unknown;
}
/**
 * Message-specific data
 */
export interface AdapterPairingPromptNotificationMessageData {
    pluginId: PluginID8;
    adapterId: AdapterID3;
    prompt: Prompt;
    url?: URL;
    deviceId?: DeviceID1;
    [k: string]: unknown;
}
/**
 * Ask an adapter to remove a device
 */
export interface AdapterRemoveDeviceRequest {
    messageType: MessageType9;
    data: AdapterRemoveDeviceRequestMessageData;
    [k: string]: unknown;
}
/**
 * Message-specific data
 */
export interface AdapterRemoveDeviceRequestMessageData {
    pluginId: PluginID9;
    adapterId: AdapterID4;
    deviceId: DeviceID2;
    [k: string]: unknown;
}
/**
 * Notice that an adapter has removed a device
 */
export interface AdapterRemoveDeviceResponse {
    messageType: MessageType10;
    data: AdapterRemoveDeviceResponseMessageData;
    [k: string]: unknown;
}
/**
 * Message-specific data
 */
export interface AdapterRemoveDeviceResponseMessageData {
    pluginId: PluginID10;
    adapterId: AdapterID5;
    deviceId: DeviceID3;
    [k: string]: unknown;
}
/**
 * Tell an adapter to start the pairing process
 */
export interface AdapterStartPairingCommand {
    messageType: MessageType11;
    data: AdapterStartPairingCommandMessageData;
    [k: string]: unknown;
}
/**
 * Message-specific data
 */
export interface AdapterStartPairingCommandMessageData {
    pluginId: PluginID11;
    adapterId: AdapterID6;
    timeout: Timeout;
    [k: string]: unknown;
}
/**
 * Request that an adapter is unloaded
 */
export interface AdapterUnloadRequest {
    messageType: MessageType12;
    data: AdapterUnloadRequestMessageData;
    [k: string]: unknown;
}
/**
 * Message-specific data
 */
export interface AdapterUnloadRequestMessageData {
    pluginId: PluginID12;
    adapterId: AdapterID7;
    [k: string]: unknown;
}
/**
 * Notice that an adapter is unloaded
 */
export interface AdapterUnloadResponse {
    messageType: MessageType13;
    data: AdapterUnloadResponseMessageData;
    [k: string]: unknown;
}
/**
 * Message-specific data
 */
export interface AdapterUnloadResponseMessageData {
    pluginId: PluginID13;
    adapterId: AdapterID8;
    [k: string]: unknown;
}
/**
 * Notification that a prompt should be presented to the user while unpairing
 */
export interface AdapterUnpairingPromptNotification {
    messageType: MessageType14;
    data: AdapterUnpairingPromptNotificationMessageData;
    [k: string]: unknown;
}
/**
 * Message-specific data
 */
export interface AdapterUnpairingPromptNotificationMessageData {
    pluginId: PluginID14;
    adapterId: AdapterID9;
    prompt: Prompt1;
    url?: URL1;
    deviceId?: DeviceID4;
    [k: string]: unknown;
}
/**
 * Notification that an action's status has changed on a device
 */
export interface DeviceActionStatusNotification {
    messageType: MessageType15;
    data: DeviceActionStatusNotificationMessageData;
    [k: string]: unknown;
}
/**
 * Message-specific data
 */
export interface DeviceActionStatusNotificationMessageData {
    pluginId: PluginID15;
    adapterId: AdapterID10;
    deviceId: DeviceID5;
    action: ActionDescription;
    [k: string]: unknown;
}
/**
 * Description of the action
 */
export interface ActionDescription {
    id: ActionID;
    name: ActionName;
    input?: Any;
    status: ActionStatus;
    timeRequested: ActionRequestTime;
    timeCompleted?: ActionCompletionTime;
    [k: string]: unknown;
}
/**
 * Notification that a new device has been added to an adapter
 */
export interface DeviceAddedNotification {
    messageType: MessageType16;
    data: DeviceAddedNotificationMessageData;
    [k: string]: unknown;
}
/**
 * Message-specific data
 */
export interface DeviceAddedNotificationMessageData {
    pluginId: PluginID16;
    adapterId: AdapterID11;
    device: Device;
    [k: string]: unknown;
}
/**
 * Description of the device
 */
export interface Device {
    "@context"?: DeviceContext;
    "@type"?: DeviceTypes[];
    id: DeviceID6;
    title?: DeviceTitle;
    description?: DeviceDescription;
    properties?: {
        [k: string]: Property;
    };
    actions?: {
        [k: string]: Action;
    };
    events?: {
        [k: string]: Event;
    };
    links?: Link[];
    baseHref?: DeviceBaseHref;
    pin?: DevicePin;
    credentialsRequired?: DeviceCredentialsRequired;
    [k: string]: unknown;
}
/**
 * Description of the Property
 *
 * This interface was referenced by `undefined`'s JSON-Schema definition
 * via the `patternProperty` ".*".
 *
 * This interface was referenced by `undefined`'s JSON-Schema definition
 * via the `patternProperty` ".*".
 */
export interface Property {
    "@type"?: PropertyType;
    name?: PropertyName;
    title?: PropertyTitle;
    description?: PropertyDescription;
    links?: Link[];
    type: PropertyValueType;
    unit?: PropertyUnit;
    minimum?: PropertyMinimumValue;
    maximum?: PropertyMaximumValue;
    multipleOf?: PropertyValuePrecision;
    enum?: PropertyValuesEnum[];
    readOnly?: PropertyReadOnly;
    visible?: PropertyVisible;
    value?: PropertyValue;
    [k: string]: unknown;
}
/**
 * A link
 */
export interface Link {
    href: LinkHref;
    rel?: LinkRel;
    mediaType?: LinkMediaType;
    [k: string]: unknown;
}
/**
 * Description of the Action
 *
 * This interface was referenced by `undefined`'s JSON-Schema definition
 * via the `patternProperty` ".*".
 *
 * This interface was referenced by `undefined`'s JSON-Schema definition
 * via the `patternProperty` ".*".
 */
export interface Action {
    "@type"?: ActionType;
    title?: ActionTitle;
    description?: ActionDescription1;
    links?: Link[];
    input?: ActionInput;
    [k: string]: unknown;
}
/**
 * An object action input
 */
export interface ObjectActionInput {
    type: ObjectInputType;
    properties: ActionInputProperties;
    [k: string]: unknown;
}
/**
 * A map of action input properties
 */
export interface ActionInputProperties {
    [k: string]: ActionInputProperty;
}
/**
 * An action input property
 *
 * This interface was referenced by `ActionInputProperties`'s JSON-Schema definition
 * via the `patternProperty` ".*".
 */
export interface ActionInputProperty {
    "@type"?: InputPropertyType;
    type?: InputPropertyValueType;
    unit?: InputPropertyUnit;
    minimum?: InputPropertyMinimumValue;
    maximum?: InputPropertyMaximumValue;
    multipleOf?: InputPropertyValuePrecision;
    enum?: PropertyValuesEnum1[];
    [k: string]: unknown;
}
/**
 * Description of the event
 *
 * This interface was referenced by `undefined`'s JSON-Schema definition
 * via the `patternProperty` ".*".
 *
 * This interface was referenced by `undefined`'s JSON-Schema definition
 * via the `patternProperty` ".*".
 */
export interface Event {
    "@type"?: EventType;
    name?: EventName;
    title?: EventTitle;
    description?: EventDescription;
    links?: Link[];
    type?: EventValueType;
    unit?: EventUnit;
    minimum?: EventMinimumValue;
    maximum?: EventMaximumValue;
    multipleOf?: EventValuePrecision;
    enum?: PropertyValuesEnum2[];
    [k: string]: unknown;
}
/**
 * The pin of the device
 */
export interface DevicePin {
    required: PinRequired;
    pattern?: PinPattern;
    [k: string]: unknown;
}
/**
 * Notification that the connected state has changed for a device
 */
export interface DeviceConnectedStateNotification {
    messageType: MessageType17;
    data: DeviceConnectedStateNotificationMessageData;
    [k: string]: unknown;
}
/**
 * Message-specific data
 */
export interface DeviceConnectedStateNotificationMessageData {
    pluginId: PluginID17;
    adapterId: AdapterID12;
    deviceId: DeviceID7;
    connected: Connected;
    [k: string]: unknown;
}
/**
 * Perform a debug command on a device
 */
export interface DeviceDebugCommand {
    messageType: MessageType18;
    data: DeviceDebugCommandMessageData;
    [k: string]: unknown;
}
/**
 * Message-specific data
 */
export interface DeviceDebugCommandMessageData {
    pluginId: PluginID18;
    adapterId: AdapterID13;
    deviceId: DeviceID8;
    cmd: Command;
    params: Params;
    [k: string]: unknown;
}
/**
 * Notification that an event has occurred on a device
 */
export interface DeviceEventNotification {
    messageType: MessageType19;
    data: DeviceEventNotificationMessageData;
    [k: string]: unknown;
}
/**
 * Message-specific data
 */
export interface DeviceEventNotificationMessageData {
    pluginId: PluginID19;
    adapterId: AdapterID14;
    deviceId: DeviceID9;
    event: EventDescription1;
    [k: string]: unknown;
}
/**
 * Description of the event
 */
export interface EventDescription1 {
    name: EventName1;
    data?: Any;
    timestamp: EventTimestamp;
    [k: string]: unknown;
}
/**
 * Notification that a property on a device has changed
 */
export interface DevicePropertyChangedNotification {
    messageType: MessageType20;
    data: DevicePropertyChangedNotificationMessageData;
    [k: string]: unknown;
}
/**
 * Message-specific data
 */
export interface DevicePropertyChangedNotificationMessageData {
    pluginId: PluginID20;
    adapterId: AdapterID15;
    deviceId: DeviceID10;
    property: Property;
    [k: string]: unknown;
}
/**
 * Remove/cancel an existing action from a device
 */
export interface DeviceRemoveActionRequest {
    messageType: MessageType21;
    data: DeviceRemoveActionRequestMessageData;
    [k: string]: unknown;
}
/**
 * Message-specific data
 */
export interface DeviceRemoveActionRequestMessageData {
    pluginId: PluginID21;
    adapterId: AdapterID16;
    messageId: MessageID;
    deviceId: DeviceID11;
    actionName: ActionName1;
    actionId: ActionID1;
    [k: string]: unknown;
}
/**
 * Notice that an action has been removed/cancelled from a device
 */
export interface DeviceRemoveActionResponse {
    messageType: MessageType22;
    data: DeviceRemoveActionResponseMessageData;
    [k: string]: unknown;
}
/**
 * Message-specific data
 */
export interface DeviceRemoveActionResponseMessageData {
    pluginId: PluginID22;
    adapterId: AdapterID17;
    deviceId: DeviceID12;
    messageId: MessageID1;
    actionName: ActionName2;
    actionId: ActionID2;
    success: Success;
    [k: string]: unknown;
}
/**
 * Request a new action on a device
 */
export interface DeviceRequestActionRequest {
    messageType: MessageType23;
    data: DeviceRequestActionRequestMessageData;
    [k: string]: unknown;
}
/**
 * Message-specific data
 */
export interface DeviceRequestActionRequestMessageData {
    pluginId: PluginID23;
    adapterId: AdapterID18;
    deviceId: DeviceID13;
    actionName: ActionName3;
    actionId: ActionID3;
    input: Input;
    [k: string]: unknown;
}
/**
 * Notice that an action has been requested on a device
 */
export interface DeviceRequestActionResponse {
    messageType: MessageType24;
    data: DeviceRequestActionResponseMessageData;
    [k: string]: unknown;
}
/**
 * Message-specific data
 */
export interface DeviceRequestActionResponseMessageData {
    pluginId: PluginID24;
    adapterId: AdapterID19;
    deviceId: DeviceID14;
    actionName: ActionName4;
    actionId: ActionID4;
    success: Success1;
    [k: string]: unknown;
}
/**
 * Set the credentials on a device
 */
export interface DeviceSetCredentialsRequest {
    messageType: MessageType25;
    data: DeviceSetCredentialsRequestMessageData;
    [k: string]: unknown;
}
/**
 * Message-specific data
 */
export interface DeviceSetCredentialsRequestMessageData {
    pluginId: PluginID25;
    adapterId: AdapterID20;
    messageId: MessageID2;
    deviceId: DeviceID15;
    username: Username;
    password: Password;
    [k: string]: unknown;
}
/**
 * Notice that setting the credentials on a device has finished
 */
export interface DeviceSetCredentialsResponse {
    messageType: MessageType26;
    data: DeviceSetCredentialsResponseMessageData;
    [k: string]: unknown;
}
/**
 * Message-specific data
 */
export interface DeviceSetCredentialsResponseMessageData {
    pluginId: PluginID26;
    adapterId: AdapterID21;
    messageId: MessageID3;
    success: Success2;
    deviceId?: DeviceID16;
    device?: Device;
    [k: string]: unknown;
}
/**
 * Set the PIN on a device
 */
export interface DeviceSetPINRequest {
    messageType: MessageType27;
    data: DeviceSetPINRequestMessageData;
    [k: string]: unknown;
}
/**
 * Message-specific data
 */
export interface DeviceSetPINRequestMessageData {
    pluginId: PluginID27;
    adapterId: AdapterID22;
    messageId: MessageID4;
    deviceId: DeviceID17;
    pin: PIN;
    [k: string]: unknown;
}
/**
 * Notice that setting the PIN on a device has finished
 */
export interface DeviceSetPINResponse {
    messageType: MessageType28;
    data: DeviceSetPINResponseMessageData;
    [k: string]: unknown;
}
/**
 * Message-specific data
 */
export interface DeviceSetPINResponseMessageData {
    pluginId: PluginID28;
    adapterId: AdapterID23;
    messageId: MessageID5;
    success: Success3;
    deviceId?: DeviceID18;
    device?: Device;
    [k: string]: unknown;
}
/**
 * Set a property value on a device
 */
export interface DeviceSetPropertyCommand {
    messageType: MessageType29;
    data: DeviceSetPropertyCommandMessageData;
    [k: string]: unknown;
}
/**
 * Message-specific data
 */
export interface DeviceSetPropertyCommandMessageData {
    pluginId: PluginID29;
    adapterId: AdapterID24;
    deviceId: DeviceID19;
    propertyName: PropertyName1;
    propertyValue: PropertyValue1;
    [k: string]: unknown;
}
/**
 * Notification that the user has saved a device
 */
export interface DeviceSavedNotification {
    messageType: MessageType30;
    data: DeviceSavedNotificationMessageData;
    [k: string]: unknown;
}
/**
 * Message-specific data
 */
export interface DeviceSavedNotificationMessageData {
    pluginId: PluginID30;
    adapterId: AdapterID25;
    deviceId: DeviceID20;
    device: DeviceWithoutId;
    [k: string]: unknown;
}
/**
 * Description of the device
 */
export interface DeviceWithoutId {
    "@context"?: DeviceContext1;
    "@type"?: DeviceTypes1[];
    title?: DeviceTitle1;
    description?: DeviceDescription1;
    properties?: {
        [k: string]: Property;
    };
    actions?: {
        [k: string]: Action;
    };
    events?: {
        [k: string]: Event;
    };
    links?: Link[];
    baseHref?: DeviceBaseHref1;
    pin?: DevicePin;
    credentialsRequired?: DeviceCredentialsRequired1;
    [k: string]: unknown;
}
/**
 * Notification that a plugin has added a notifier
 */
export interface NotifierAddedNotification {
    messageType: MessageType31;
    data: NotifierAddedNotificationMessageData;
    [k: string]: unknown;
}
/**
 * Message-specific data
 */
export interface NotifierAddedNotificationMessageData {
    pluginId: PluginID31;
    notifierId: NotifierID;
    name: Name1;
    packageName: PackageName1;
    [k: string]: unknown;
}
/**
 * Request that an notifier is unloaded
 */
export interface NotifierUnloadRequest {
    messageType: MessageType32;
    data: NotifierUnloadRequestMessageData;
    [k: string]: unknown;
}
/**
 * Message-specific data
 */
export interface NotifierUnloadRequestMessageData {
    pluginId: PluginID32;
    notifierId: NotifierID1;
    [k: string]: unknown;
}
/**
 * Notice that an notifier is unloaded
 */
export interface NotifierUnloadResponse {
    messageType: MessageType33;
    data: NotifierUnloadResponseMessageData;
    [k: string]: unknown;
}
/**
 * Message-specific data
 */
export interface NotifierUnloadResponseMessageData {
    pluginId: PluginID33;
    notifierId: NotifierID2;
    [k: string]: unknown;
}
/**
 * Notification that a new outlet has been added to a notifier
 */
export interface OutletAddedNotification {
    messageType: MessageType34;
    data: OutletAddedNotificationMessageData;
    [k: string]: unknown;
}
/**
 * Message-specific data
 */
export interface OutletAddedNotificationMessageData {
    pluginId: PluginID34;
    notifierId: NotifierID3;
    outlet: OutletDescription;
    [k: string]: unknown;
}
/**
 * Description of the outlet
 */
export interface OutletDescription {
    id: OutletID;
    name: OutletName;
    [k: string]: unknown;
}
/**
 * Notify a user via an outlet
 */
export interface OutletNotifyRequest {
    messageType: MessageType35;
    data: OutletNotifyRequestMessageData;
    [k: string]: unknown;
}
/**
 * Message-specific data
 */
export interface OutletNotifyRequestMessageData {
    pluginId: PluginID35;
    notifierId: NotifierID4;
    outletId: OutletID1;
    messageId: MessageID6;
    title: Title;
    message: NotificationMessage;
    level: Level;
    [k: string]: unknown;
}
/**
 * Notice that an outlet notification has finished
 */
export interface OutletNotifyResponse {
    messageType: MessageType36;
    data: OutletNotifyResponseMessageData;
    [k: string]: unknown;
}
/**
 * Message-specific data
 */
export interface OutletNotifyResponseMessageData {
    pluginId: PluginID36;
    notifierId: NotifierID5;
    outletId: OutletID2;
    messageId: MessageID7;
    success: Success4;
    [k: string]: unknown;
}
/**
 * Notification that an outlet has been removed from a notifier
 */
export interface OutletRemovedNotification {
    messageType: MessageType37;
    data: OutletRemovedNotificationMessageData;
    [k: string]: unknown;
}
/**
 * Message-specific data
 */
export interface OutletRemovedNotificationMessageData {
    pluginId: PluginID37;
    notifierId: NotifierID6;
    outletId: OutletID3;
    [k: string]: unknown;
}
/**
 * Notification that a plugin has added an API handler
 */
export interface APIHandlerAddedNotification {
    messageType: MessageType38;
    data: APIHandlerAddedNotificationMessageData;
    [k: string]: unknown;
}
/**
 * Message-specific data
 */
export interface APIHandlerAddedNotificationMessageData {
    pluginId: PluginID38;
    packageName: PackageName2;
    [k: string]: unknown;
}
/**
 * Handler an incoming API request
 */
export interface APIHandlerAPIRequest {
    messageType: MessageType39;
    data: APIHandlerAPIRequestMessageData;
    [k: string]: unknown;
}
/**
 * Message-specific data
 */
export interface APIHandlerAPIRequestMessageData {
    pluginId: PluginID39;
    packageName: PackageName3;
    messageId: MessageID8;
    request: Request;
    [k: string]: unknown;
}
/**
 * Incoming request
 */
export interface Request {
    method: Method;
    path: Path;
    query: Query;
    body: Body;
    [k: string]: unknown;
}
/**
 * Query parameters from URL
 */
export interface Query {
    [k: string]: unknown;
}
/**
 * Parsed parameters from the body
 */
export interface Body {
    [k: string]: unknown;
}
/**
 * Response message from an API handler request
 */
export interface APIHandlerAPIResponse {
    messageType: MessageType40;
    data: APIHandlerAPIResponseMessageData;
    [k: string]: unknown;
}
/**
 * Message-specific data
 */
export interface APIHandlerAPIResponseMessageData {
    pluginId: PluginID40;
    packageName: PackageName4;
    messageId: MessageID9;
    response: Response;
    [k: string]: unknown;
}
/**
 * Outgoing response
 */
export interface Response {
    status: Status;
    contentType: ContentType;
    content: Content;
    [k: string]: unknown;
}
/**
 * Request that an API handler is unloaded
 */
export interface APIHandlerUnloadRequest {
    messageType: MessageType41;
    data: APIHandlerUnloadRequestMessageData;
    [k: string]: unknown;
}
/**
 * Message-specific data
 */
export interface APIHandlerUnloadRequestMessageData {
    pluginId: PluginID41;
    packageName: PackageName5;
    [k: string]: unknown;
}
/**
 * Notice that an API handler is unloaded
 */
export interface APIHandlerUnloadResponse {
    messageType: MessageType42;
    data: APIHandlerUnloadResponseMessageData;
    [k: string]: unknown;
}
/**
 * Message-specific data
 */
export interface APIHandlerUnloadResponseMessageData {
    pluginId: PluginID42;
    packageName: PackageName6;
    [k: string]: unknown;
}
/**
 * Ask the mock adapter to add a new device
 */
export interface MockAdapterAddDeviceRequest {
    messageType: MessageType43;
    data: MockAdapterAddDeviceRequestMessageData;
    [k: string]: unknown;
}
/**
 * Message-specific data
 */
export interface MockAdapterAddDeviceRequestMessageData {
    pluginId: PluginID43;
    adapterId: AdapterID26;
    deviceId: DeviceID21;
    deviceDescr: DeviceDescription2;
    [k: string]: unknown;
}
/**
 * Description of the new device
 */
export interface DeviceDescription2 {
    [k: string]: unknown;
}
/**
 * Notice that the mock adapter has finished adding a new device
 */
export interface MockAdapterAddDeviceResponse {
    messageType: MessageType44;
    data: MockAdapterAddDeviceResponseMessageData;
    [k: string]: unknown;
}
/**
 * Message-specific data
 */
export interface MockAdapterAddDeviceResponseMessageData {
    pluginId: PluginID44;
    adapterId: AdapterID27;
    success: Success5;
    deviceId?: DeviceID22;
    error?: Error;
    [k: string]: unknown;
}
/**
 * Ask the mock adapter to clear its state
 */
export interface MockAdapterClearStateRequest {
    messageType: MessageType45;
    data: MockAdapterClearStateRequestMessageData;
    [k: string]: unknown;
}
/**
 * Message-specific data
 */
export interface MockAdapterClearStateRequestMessageData {
    pluginId: PluginID45;
    adapterId: AdapterID28;
    [k: string]: unknown;
}
/**
 * Notice that the mock adapter has cleared its state
 */
export interface MockAdapterClearStateResponse {
    messageType: MessageType46;
    data: MockAdapterClearStateResponseMessageData;
    [k: string]: unknown;
}
/**
 * Message-specific data
 */
export interface MockAdapterClearStateResponseMessageData {
    pluginId: PluginID46;
    adapterId: AdapterID29;
    [k: string]: unknown;
}
/**
 * Tell the mock adapter to pair a device
 */
export interface MockAdapterPairDeviceCommand {
    messageType: MessageType47;
    data: MockAdapterPairDeviceCommandMessageData;
    [k: string]: unknown;
}
/**
 * Message-specific data
 */
export interface MockAdapterPairDeviceCommandMessageData {
    pluginId: PluginID47;
    adapterId: AdapterID30;
    deviceId: DeviceID23;
    deviceDescr: DeviceDescription3;
    [k: string]: unknown;
}
/**
 * Description of the device
 */
export interface DeviceDescription3 {
    [k: string]: unknown;
}
/**
 * Ask the mock adapter to remove a device
 */
export interface MockAdapterRemoveDeviceRequest {
    messageType: MessageType48;
    data: MockAdapterRemoveDeviceRequestMessageData;
    [k: string]: unknown;
}
/**
 * Message-specific data
 */
export interface MockAdapterRemoveDeviceRequestMessageData {
    pluginId: PluginID48;
    adapterId: AdapterID31;
    deviceId: DeviceID24;
    [k: string]: unknown;
}
/**
 * Notice that the mock adapter has finished remove a device
 */
export interface MockAdapterRemoveDeviceResponse {
    messageType: MessageType49;
    data: MockAdapterRemoveDeviceResponseMessageData;
    [k: string]: unknown;
}
/**
 * Message-specific data
 */
export interface MockAdapterRemoveDeviceResponseMessageData {
    pluginId: PluginID49;
    adapterId: AdapterID32;
    success: Success6;
    deviceId?: DeviceID25;
    error?: Error1;
    [k: string]: unknown;
}
/**
 * Tell the mock adapter to unpair a device
 */
export interface MockAdapterUnpairDeviceCommand {
    messageType: MessageType50;
    data: MockAdapterUnpairDeviceCommandMessageData;
    [k: string]: unknown;
}
/**
 * Message-specific data
 */
export interface MockAdapterUnpairDeviceCommandMessageData {
    pluginId: PluginID50;
    adapterId: AdapterID33;
    deviceId: DeviceID26;
    [k: string]: unknown;
}
//# sourceMappingURL=schema.d.ts.map