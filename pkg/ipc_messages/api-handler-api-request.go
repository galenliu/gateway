// Code generated by github.com/atombender/go-jsonschema, DO NOT EDIT.

package messages

import "fmt"
import "encoding/json"

// Handler an incoming API request
type ApiHandlerApiRequestJson struct {
	// Message-specific data
	Data ApiHandlerApiRequestJsonData `json:"data" yaml:"data"`

	// The message type, used by the IPC client and server to differentiate messages
	MessageType int `json:"messageType" yaml:"messageType"`
}

// Incoming request
type ApiHandlerApiRequestJsonDataRequest struct {
	// Parsed parameters from the body
	Body ApiHandlerApiRequestJsonDataRequestBody `json:"body" yaml:"body"`

	// HTTP method of the request
	Method string `json:"method" yaml:"method"`

	// Request path, relative to this handler
	Path string `json:"path" yaml:"path"`

	// Query parameters from URL
	Query ApiHandlerApiRequestJsonDataRequestQuery `json:"query" yaml:"query"`
}

// Query parameters from URL
type ApiHandlerApiRequestJsonDataRequestQuery map[string]any

// UnmarshalJSON implements json.Unmarshaler.
func (j *ApiHandlerApiRequestJsonDataRequest) UnmarshalJSON(b []byte) error {
	var raw map[string]any
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["body"]; !ok || v == nil {
		return fmt.Errorf("field body in ApiHandlerApiRequestJsonDataRequest: required")
	}
	if v, ok := raw["method"]; !ok || v == nil {
		return fmt.Errorf("field method in ApiHandlerApiRequestJsonDataRequest: required")
	}
	if v, ok := raw["path"]; !ok || v == nil {
		return fmt.Errorf("field path in ApiHandlerApiRequestJsonDataRequest: required")
	}
	if v, ok := raw["query"]; !ok || v == nil {
		return fmt.Errorf("field query in ApiHandlerApiRequestJsonDataRequest: required")
	}
	type Plain ApiHandlerApiRequestJsonDataRequest
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = ApiHandlerApiRequestJsonDataRequest(plain)
	return nil
}

// Message-specific data
type ApiHandlerApiRequestJsonData struct {
	// Unique ID of this message
	MessageId int `json:"messageId" yaml:"messageId"`

	// Name of the add-on package
	PackageName string `json:"packageName" yaml:"packageName"`

	// ID of the plugin
	PluginId string `json:"pluginId" yaml:"pluginId"`

	// Incoming request
	Request ApiHandlerApiRequestJsonDataRequest `json:"request" yaml:"request"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *ApiHandlerApiRequestJsonData) UnmarshalJSON(b []byte) error {
	var raw map[string]any
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["messageId"]; !ok || v == nil {
		return fmt.Errorf("field messageId in ApiHandlerApiRequestJsonData: required")
	}
	if v, ok := raw["packageName"]; !ok || v == nil {
		return fmt.Errorf("field packageName in ApiHandlerApiRequestJsonData: required")
	}
	if v, ok := raw["pluginId"]; !ok || v == nil {
		return fmt.Errorf("field pluginId in ApiHandlerApiRequestJsonData: required")
	}
	if v, ok := raw["request"]; !ok || v == nil {
		return fmt.Errorf("field request in ApiHandlerApiRequestJsonData: required")
	}
	type Plain ApiHandlerApiRequestJsonData
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = ApiHandlerApiRequestJsonData(plain)
	return nil
}

// Parsed parameters from the body
type ApiHandlerApiRequestJsonDataRequestBody map[string]any

// UnmarshalJSON implements json.Unmarshaler.
func (j *ApiHandlerApiRequestJson) UnmarshalJSON(b []byte) error {
	var raw map[string]any
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["data"]; !ok || v == nil {
		return fmt.Errorf("field data in ApiHandlerApiRequestJson: required")
	}
	if v, ok := raw["messageType"]; !ok || v == nil {
		return fmt.Errorf("field messageType in ApiHandlerApiRequestJson: required")
	}
	type Plain ApiHandlerApiRequestJson
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = ApiHandlerApiRequestJson(plain)
	return nil
}
