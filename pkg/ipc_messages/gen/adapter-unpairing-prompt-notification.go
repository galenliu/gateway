// Code generated by github.com/atombender/go-jsonschema, DO NOT EDIT.

package messages

import "fmt"
import "encoding/json"

// Message-specific data
type AdapterUnpairingPromptNotificationJsonData struct {
	// ID of the adapter
	AdapterId string `json:"adapterId" yaml:"adapterId"`

	// ID of specific device the prompt pertains to
	DeviceId *string `json:"deviceId,omitempty" yaml:"deviceId,omitempty"`

	// ID of the plugin
	PluginId string `json:"pluginId" yaml:"pluginId"`

	// The message to present to the user
	Prompt string `json:"prompt" yaml:"prompt"`

	// URL of a web page containing more information
	Url *string `json:"url,omitempty" yaml:"url,omitempty"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *AdapterUnpairingPromptNotificationJsonData) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["adapterId"]; !ok || v == nil {
		return fmt.Errorf("field adapterId in AdapterUnpairingPromptNotificationJsonData: required")
	}
	if v, ok := raw["pluginId"]; !ok || v == nil {
		return fmt.Errorf("field pluginId in AdapterUnpairingPromptNotificationJsonData: required")
	}
	if v, ok := raw["prompt"]; !ok || v == nil {
		return fmt.Errorf("field prompt in AdapterUnpairingPromptNotificationJsonData: required")
	}
	type Plain AdapterUnpairingPromptNotificationJsonData
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = AdapterUnpairingPromptNotificationJsonData(plain)
	return nil
}

// Notification that a prompt should be presented to the user while unpairing
type AdapterUnpairingPromptNotificationJson struct {
	// Message-specific data
	Data AdapterUnpairingPromptNotificationJsonData `json:"data" yaml:"data"`

	// The message type, used by the IPC client and server to differentiate messages
	MessageType int `json:"messageType" yaml:"messageType"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *AdapterUnpairingPromptNotificationJson) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["data"]; !ok || v == nil {
		return fmt.Errorf("field data in AdapterUnpairingPromptNotificationJson: required")
	}
	if v, ok := raw["messageType"]; !ok || v == nil {
		return fmt.Errorf("field messageType in AdapterUnpairingPromptNotificationJson: required")
	}
	type Plain AdapterUnpairingPromptNotificationJson
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = AdapterUnpairingPromptNotificationJson(plain)
	return nil
}
