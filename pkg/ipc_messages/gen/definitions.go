// Code generated by github.com/atombender/go-jsonschema, DO NOT EDIT.

package messages

import "fmt"
import "reflect"
import "encoding/json"

// UnmarshalJSON implements json.Unmarshaler.
func (j *Device_1) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["id"]; !ok || v == nil {
		return fmt.Errorf("field id in Device_1: required")
	}
	type Plain Device_1
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = Device_1(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *Property) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["type"]; !ok || v == nil {
		return fmt.Errorf("field type in Property: required")
	}
	type Plain Property
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = Property(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *NotificationLevel) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_NotificationLevel {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_NotificationLevel, v)
	}
	*j = NotificationLevel(v)
	return nil
}

type ActionFormsElem interface{}

type ActionInput interface{}

// Description of the Action
type Action struct {
	// The type of the action
	Type *string `json:"@type,omitempty" yaml:"@type,omitempty"`

	// Description of the Action
	Description *string `json:"description,omitempty" yaml:"description,omitempty"`

	// Forms corresponds to the JSON schema field "forms".
	Forms []ActionFormsElem `json:"forms,omitempty" yaml:"forms,omitempty"`

	// Input corresponds to the JSON schema field "input".
	Input ActionInput `json:"input,omitempty" yaml:"input,omitempty"`

	// The title of the Action
	Title *string `json:"title,omitempty" yaml:"title,omitempty"`
}

type ActionInput_1 interface{}

// The possible values of the input property
type ActionInputPropertyEnumElem interface{}

type ActionInputPropertyType_2 string

// UnmarshalJSON implements json.Unmarshaler.
func (j *Property_1) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["type"]; !ok || v == nil {
		return fmt.Errorf("field type in Property_1: required")
	}
	type Plain Property_1
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = Property_1(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *ActionInputPropertyType_2) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_ActionInputPropertyType_2 {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_ActionInputPropertyType_2, v)
	}
	*j = ActionInputPropertyType_2(v)
	return nil
}

const ActionInputPropertyType_2_Null ActionInputPropertyType_2 = "null"
const ActionInputPropertyType_2_Boolean ActionInputPropertyType_2 = "boolean"
const ActionInputPropertyType_2_Object ActionInputPropertyType_2 = "object"
const ActionInputPropertyType_2_Array ActionInputPropertyType_2 = "array"
const ActionInputPropertyType_2_Number ActionInputPropertyType_2 = "number"
const ActionInputPropertyType_2_Integer ActionInputPropertyType_2 = "integer"
const ActionInputPropertyType_2_String ActionInputPropertyType_2 = "string"

// An action input property
type ActionInputProperty struct {
	// The type of the input property
	Type *string `json:"@type,omitempty" yaml:"@type,omitempty"`

	// Enum corresponds to the JSON schema field "enum".
	Enum []ActionInputPropertyEnumElem `json:"enum,omitempty" yaml:"enum,omitempty"`

	// The maximum value of the input property
	Maximum *float64 `json:"maximum,omitempty" yaml:"maximum,omitempty"`

	// The minimum value of the input property
	Minimum *float64 `json:"minimum,omitempty" yaml:"minimum,omitempty"`

	// The precision of the value
	MultipleOf *float64 `json:"multipleOf,omitempty" yaml:"multipleOf,omitempty"`

	// The type of the input property value
	Type_2 *ActionInputPropertyType_2 `json:"type,omitempty" yaml:"type,omitempty"`

	// The unit of the input property
	Unit *string `json:"unit,omitempty" yaml:"unit,omitempty"`
}

type Any interface{}

type AnyUri string

type DeviceActions map[string]interface{}

type DeviceEvents map[string]interface{}

// UnmarshalJSON implements json.Unmarshaler.
func (j *PropertyType_2_1) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_PropertyType_2_1 {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_PropertyType_2_1, v)
	}
	*j = PropertyType_2_1(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *Link) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["href"]; !ok || v == nil {
		return fmt.Errorf("field href in Link: required")
	}
	type Plain Link
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = Link(plain)
	return nil
}

const EventType_2_1_Object EventType_2_1 = "object"

// UnmarshalJSON implements json.Unmarshaler.
func (j *Pin) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["required"]; !ok || v == nil {
		return fmt.Errorf("field required in Pin: required")
	}
	type Plain Pin
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = Pin(plain)
	return nil
}

type DeviceProperties map[string]interface{}

// Description of the device
type Device struct {
	// Context of the device
	Context *string `json:"@context,omitempty" yaml:"@context,omitempty"`

	// Type corresponds to the JSON schema field "@type".
	Type []string `json:"@type,omitempty" yaml:"@type,omitempty"`

	// Actions corresponds to the JSON schema field "actions".
	Actions DeviceActions `json:"actions,omitempty" yaml:"actions,omitempty"`

	// The base href of the device
	BaseHref *string `json:"baseHref,omitempty" yaml:"baseHref,omitempty"`

	// If credentials are required
	CredentialsRequired *bool `json:"credentialsRequired,omitempty" yaml:"credentialsRequired,omitempty"`

	// Description of the device
	Description *string `json:"description,omitempty" yaml:"description,omitempty"`

	// Events corresponds to the JSON schema field "events".
	Events DeviceEvents `json:"events,omitempty" yaml:"events,omitempty"`

	// ID of the device
	Id string `json:"id" yaml:"id"`

	// Links corresponds to the JSON schema field "links".
	Links []Link `json:"links,omitempty" yaml:"links,omitempty"`

	// Pin corresponds to the JSON schema field "pin".
	Pin *Pin `json:"pin,omitempty" yaml:"pin,omitempty"`

	// Properties corresponds to the JSON schema field "properties".
	Properties DeviceProperties `json:"properties,omitempty" yaml:"properties,omitempty"`

	// Title of the Device
	Title *string `json:"title,omitempty" yaml:"title,omitempty"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *Device) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["id"]; !ok || v == nil {
		return fmt.Errorf("field id in Device: required")
	}
	type Plain Device
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = Device(plain)
	return nil
}

type DeviceWithoutIdActions map[string]interface{}

type DeviceWithoutIdEvents map[string]interface{}

type DeviceWithoutIdProperties map[string]interface{}

// Description of the device
type DeviceWithoutId struct {
	// Context of the device
	Context *string `json:"@context,omitempty" yaml:"@context,omitempty"`

	// Type corresponds to the JSON schema field "@type".
	Type []string `json:"@type,omitempty" yaml:"@type,omitempty"`

	// Actions corresponds to the JSON schema field "actions".
	Actions DeviceWithoutIdActions `json:"actions,omitempty" yaml:"actions,omitempty"`

	// The base href of the device
	BaseHref *string `json:"baseHref,omitempty" yaml:"baseHref,omitempty"`

	// If credentials are required
	CredentialsRequired *bool `json:"credentialsRequired,omitempty" yaml:"credentialsRequired,omitempty"`

	// Description of the device
	Description *string `json:"description,omitempty" yaml:"description,omitempty"`

	// Events corresponds to the JSON schema field "events".
	Events DeviceWithoutIdEvents `json:"events,omitempty" yaml:"events,omitempty"`

	// Links corresponds to the JSON schema field "links".
	Links []Link `json:"links,omitempty" yaml:"links,omitempty"`

	// Pin corresponds to the JSON schema field "pin".
	Pin *Pin `json:"pin,omitempty" yaml:"pin,omitempty"`

	// Properties corresponds to the JSON schema field "properties".
	Properties DeviceWithoutIdProperties `json:"properties,omitempty" yaml:"properties,omitempty"`

	// Title of the Device
	Title *string `json:"title,omitempty" yaml:"title,omitempty"`
}

// The possible values of the property
type EventEnumElem interface{}

type EventFormsElem interface{}

type FormElementAction_1 interface{}

type FormElementEvent_1 interface{}

// UnmarshalJSON implements json.Unmarshaler.
func (j *EventType_2) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_EventType_2 {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_EventType_2, v)
	}
	*j = EventType_2(v)
	return nil
}

const EventType_2_Null EventType_2 = "null"
const EventType_2_Boolean EventType_2 = "boolean"
const EventType_2_Object EventType_2 = "object"
const EventType_2_Array EventType_2 = "array"
const EventType_2_Number EventType_2 = "number"
const EventType_2_Integer EventType_2 = "integer"
const EventType_2_String EventType_2 = "string"

// Description of the event
type Event struct {
	// The type of the event
	Type *string `json:"@type,omitempty" yaml:"@type,omitempty"`

	// Description of the event
	Description *string `json:"description,omitempty" yaml:"description,omitempty"`

	// Enum corresponds to the JSON schema field "enum".
	Enum []EventEnumElem `json:"enum,omitempty" yaml:"enum,omitempty"`

	// Forms corresponds to the JSON schema field "forms".
	Forms []EventFormsElem `json:"forms,omitempty" yaml:"forms,omitempty"`

	// The maximum value of the event
	Maximum *float64 `json:"maximum,omitempty" yaml:"maximum,omitempty"`

	// The minimum value of the event
	Minimum *float64 `json:"minimum,omitempty" yaml:"minimum,omitempty"`

	// The precision of the value
	MultipleOf *float64 `json:"multipleOf,omitempty" yaml:"multipleOf,omitempty"`

	// The name of the event
	Name *string `json:"name,omitempty" yaml:"name,omitempty"`

	// The title of the event
	Title *string `json:"title,omitempty" yaml:"title,omitempty"`

	// The type of the event value
	Type_2 *EventType_2 `json:"type,omitempty" yaml:"type,omitempty"`

	// The unit of the event
	Unit *string `json:"unit,omitempty" yaml:"unit,omitempty"`
}

type FormElementResponse struct {
	// ContentType corresponds to the JSON schema field "contentType".
	ContentType *string `json:"contentType,omitempty" yaml:"contentType,omitempty"`
}

type FormElementProperty_1 interface{}

// UnmarshalJSON implements json.Unmarshaler.
func (j *FormElement_1) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["href"]; !ok || v == nil {
		return fmt.Errorf("field href in FormElement_1: required")
	}
	type Plain FormElement_1
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = FormElement_1(plain)
	return nil
}

type FormElement struct {
	// ContentCoding corresponds to the JSON schema field "contentCoding".
	ContentCoding *string `json:"contentCoding,omitempty" yaml:"contentCoding,omitempty"`

	// ContentType corresponds to the JSON schema field "contentType".
	ContentType *string `json:"contentType,omitempty" yaml:"contentType,omitempty"`

	// Href corresponds to the JSON schema field "href".
	Href AnyUri `json:"href" yaml:"href"`

	// Response corresponds to the JSON schema field "response".
	Response *FormElementResponse `json:"response,omitempty" yaml:"response,omitempty"`

	// Scopes corresponds to the JSON schema field "scopes".
	Scopes FormElementScopes `json:"scopes,omitempty" yaml:"scopes,omitempty"`

	// Security corresponds to the JSON schema field "security".
	Security FormElementSecurity `json:"security,omitempty" yaml:"security,omitempty"`

	// Subprotocol corresponds to the JSON schema field "subprotocol".
	Subprotocol *string `json:"subprotocol,omitempty" yaml:"subprotocol,omitempty"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *FormElement) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["href"]; !ok || v == nil {
		return fmt.Errorf("field href in FormElement: required")
	}
	type Plain FormElement
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = FormElement(plain)
	return nil
}

type FormElementAction interface{}

type FormElementEvent interface{}

type FormElementProperty interface{}

// Description of the Action
type Action_1 struct {
	// The type of the action
	Type *string `json:"@type,omitempty" yaml:"@type,omitempty"`

	// Description of the Action
	Description *string `json:"description,omitempty" yaml:"description,omitempty"`

	// Forms corresponds to the JSON schema field "forms".
	Forms []ActionFormsElem_1 `json:"forms,omitempty" yaml:"forms,omitempty"`

	// Input corresponds to the JSON schema field "input".
	Input ActionInput_2 `json:"input,omitempty" yaml:"input,omitempty"`

	// The title of the Action
	Title *string `json:"title,omitempty" yaml:"title,omitempty"`
}

type FormElementResponse_1 struct {
	// ContentType corresponds to the JSON schema field "contentType".
	ContentType *string `json:"contentType,omitempty" yaml:"contentType,omitempty"`
}

// Description of the event
type Event_1 struct {
	// The type of the event
	Type *string `json:"@type,omitempty" yaml:"@type,omitempty"`

	// Description of the event
	Description *string `json:"description,omitempty" yaml:"description,omitempty"`

	// Enum corresponds to the JSON schema field "enum".
	Enum []EventEnumElem_1 `json:"enum,omitempty" yaml:"enum,omitempty"`

	// Forms corresponds to the JSON schema field "forms".
	Forms []EventFormsElem_1 `json:"forms,omitempty" yaml:"forms,omitempty"`

	// The maximum value of the event
	Maximum *float64 `json:"maximum,omitempty" yaml:"maximum,omitempty"`

	// The minimum value of the event
	Minimum *float64 `json:"minimum,omitempty" yaml:"minimum,omitempty"`

	// The precision of the value
	MultipleOf *float64 `json:"multipleOf,omitempty" yaml:"multipleOf,omitempty"`

	// The name of the event
	Name *string `json:"name,omitempty" yaml:"name,omitempty"`

	// The title of the event
	Title *string `json:"title,omitempty" yaml:"title,omitempty"`

	// The type of the event value
	Type_2 *EventType_2_1 `json:"type,omitempty" yaml:"type,omitempty"`

	// The unit of the event
	Unit *string `json:"unit,omitempty" yaml:"unit,omitempty"`
}

const EventType_2_1_String EventType_2_1 = "string"
const EventType_2_1_Integer EventType_2_1 = "integer"

// UnmarshalJSON implements json.Unmarshaler.
func (j *PropertyType_2) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_PropertyType_2 {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_PropertyType_2, v)
	}
	*j = PropertyType_2(v)
	return nil
}

const EventType_2_1_Number EventType_2_1 = "number"
const EventType_2_1_Array EventType_2_1 = "array"
const EventType_2_1_Boolean EventType_2_1 = "boolean"
const EventType_2_1_Null EventType_2_1 = "null"

// UnmarshalJSON implements json.Unmarshaler.
func (j *EventType_2_1) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_EventType_2_1 {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_EventType_2_1, v)
	}
	*j = EventType_2_1(v)
	return nil
}

type EventType_2_1 string

type EventFormsElem_1 interface{}

// The possible values of the property
type EventEnumElem_1 interface{}

// Description of the device
type DeviceWithoutId_1 struct {
	// Context of the device
	Context *string `json:"@context,omitempty" yaml:"@context,omitempty"`

	// Type corresponds to the JSON schema field "@type".
	Type []string `json:"@type,omitempty" yaml:"@type,omitempty"`

	// Actions corresponds to the JSON schema field "actions".
	Actions DeviceWithoutIdActions_1 `json:"actions,omitempty" yaml:"actions,omitempty"`

	// The base href of the device
	BaseHref *string `json:"baseHref,omitempty" yaml:"baseHref,omitempty"`

	// If credentials are required
	CredentialsRequired *bool `json:"credentialsRequired,omitempty" yaml:"credentialsRequired,omitempty"`

	// Description of the device
	Description *string `json:"description,omitempty" yaml:"description,omitempty"`

	// Events corresponds to the JSON schema field "events".
	Events DeviceWithoutIdEvents_1 `json:"events,omitempty" yaml:"events,omitempty"`

	// Links corresponds to the JSON schema field "links".
	Links []Link_1 `json:"links,omitempty" yaml:"links,omitempty"`

	// Pin corresponds to the JSON schema field "pin".
	Pin *Pin_1 `json:"pin,omitempty" yaml:"pin,omitempty"`

	// Properties corresponds to the JSON schema field "properties".
	Properties DeviceWithoutIdProperties_1 `json:"properties,omitempty" yaml:"properties,omitempty"`

	// Title of the Device
	Title *string `json:"title,omitempty" yaml:"title,omitempty"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *NotificationLevel_1) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_NotificationLevel_1 {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_NotificationLevel_1, v)
	}
	*j = NotificationLevel_1(v)
	return nil
}

type ActionFormsElem_1 interface{}

// Description of the device
type Device_1 struct {
	// Context of the device
	Context *string `json:"@context,omitempty" yaml:"@context,omitempty"`

	// Type corresponds to the JSON schema field "@type".
	Type []string `json:"@type,omitempty" yaml:"@type,omitempty"`

	// Actions corresponds to the JSON schema field "actions".
	Actions DeviceActions_1 `json:"actions,omitempty" yaml:"actions,omitempty"`

	// The base href of the device
	BaseHref *string `json:"baseHref,omitempty" yaml:"baseHref,omitempty"`

	// If credentials are required
	CredentialsRequired *bool `json:"credentialsRequired,omitempty" yaml:"credentialsRequired,omitempty"`

	// Description of the device
	Description *string `json:"description,omitempty" yaml:"description,omitempty"`

	// Events corresponds to the JSON schema field "events".
	Events DeviceEvents_1 `json:"events,omitempty" yaml:"events,omitempty"`

	// ID of the device
	Id string `json:"id" yaml:"id"`

	// Links corresponds to the JSON schema field "links".
	Links []Link_1 `json:"links,omitempty" yaml:"links,omitempty"`

	// Pin corresponds to the JSON schema field "pin".
	Pin *Pin_1 `json:"pin,omitempty" yaml:"pin,omitempty"`

	// Properties corresponds to the JSON schema field "properties".
	Properties DeviceProperties_1 `json:"properties,omitempty" yaml:"properties,omitempty"`

	// Title of the Device
	Title *string `json:"title,omitempty" yaml:"title,omitempty"`
}

type EventType_2 string

type ActionInput_3 interface{}

// The possible values of the input property
type ActionInputPropertyEnumElem_1 interface{}

type ActionInputPropertyType_2_1 string

type DeviceWithoutIdProperties_1 map[string]interface{}

// UnmarshalJSON implements json.Unmarshaler.
func (j *ActionInputPropertyType_2_1) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_ActionInputPropertyType_2_1 {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_ActionInputPropertyType_2_1, v)
	}
	*j = ActionInputPropertyType_2_1(v)
	return nil
}

const ActionInputPropertyType_2_1_Null ActionInputPropertyType_2_1 = "null"
const ActionInputPropertyType_2_1_Boolean ActionInputPropertyType_2_1 = "boolean"
const ActionInputPropertyType_2_1_Object ActionInputPropertyType_2_1 = "object"
const ActionInputPropertyType_2_1_Array ActionInputPropertyType_2_1 = "array"
const ActionInputPropertyType_2_1_Number ActionInputPropertyType_2_1 = "number"
const ActionInputPropertyType_2_1_Integer ActionInputPropertyType_2_1 = "integer"
const ActionInputPropertyType_2_1_String ActionInputPropertyType_2_1 = "string"

// An action input property
type ActionInputProperty_1 struct {
	// The type of the input property
	Type *string `json:"@type,omitempty" yaml:"@type,omitempty"`

	// Enum corresponds to the JSON schema field "enum".
	Enum []ActionInputPropertyEnumElem_1 `json:"enum,omitempty" yaml:"enum,omitempty"`

	// The maximum value of the input property
	Maximum *float64 `json:"maximum,omitempty" yaml:"maximum,omitempty"`

	// The minimum value of the input property
	Minimum *float64 `json:"minimum,omitempty" yaml:"minimum,omitempty"`

	// The precision of the value
	MultipleOf *float64 `json:"multipleOf,omitempty" yaml:"multipleOf,omitempty"`

	// The type of the input property value
	Type_2 *ActionInputPropertyType_2_1 `json:"type,omitempty" yaml:"type,omitempty"`

	// The unit of the input property
	Unit *string `json:"unit,omitempty" yaml:"unit,omitempty"`
}

type Any_1 interface{}

type AnyUri_1 string

type DeviceActions_1 map[string]interface{}

type DeviceEvents_1 map[string]interface{}

type DeviceWithoutIdEvents_1 map[string]interface{}

// UnmarshalJSON implements json.Unmarshaler.
func (j *Link_1) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["href"]; !ok || v == nil {
		return fmt.Errorf("field href in Link_1: required")
	}
	type Plain Link_1
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = Link_1(plain)
	return nil
}

type DeviceWithoutIdActions_1 map[string]interface{}

// UnmarshalJSON implements json.Unmarshaler.
func (j *Pin_1) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["required"]; !ok || v == nil {
		return fmt.Errorf("field required in Pin_1: required")
	}
	type Plain Pin_1
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = Pin_1(plain)
	return nil
}

type DeviceProperties_1 map[string]interface{}

type ActionInput_2 interface{}

type FormElementRoot interface{}

type FormElementRoot_1 interface{}

type FormElementScopes interface{}

type FormElementScopes_1 interface{}

type FormElementSecurity interface{}

type FormElementSecurity_1 interface{}

type FormElement_1 struct {
	// ContentCoding corresponds to the JSON schema field "contentCoding".
	ContentCoding *string `json:"contentCoding,omitempty" yaml:"contentCoding,omitempty"`

	// ContentType corresponds to the JSON schema field "contentType".
	ContentType *string `json:"contentType,omitempty" yaml:"contentType,omitempty"`

	// Href corresponds to the JSON schema field "href".
	Href AnyUri_1 `json:"href" yaml:"href"`

	// Response corresponds to the JSON schema field "response".
	Response *FormElementResponse_1 `json:"response,omitempty" yaml:"response,omitempty"`

	// Scopes corresponds to the JSON schema field "scopes".
	Scopes FormElementScopes_1 `json:"scopes,omitempty" yaml:"scopes,omitempty"`

	// Security corresponds to the JSON schema field "security".
	Security FormElementSecurity_1 `json:"security,omitempty" yaml:"security,omitempty"`

	// Subprotocol corresponds to the JSON schema field "subprotocol".
	Subprotocol *string `json:"subprotocol,omitempty" yaml:"subprotocol,omitempty"`
}

// A link
type Link struct {
	// The href of the link
	Href string `json:"href" yaml:"href"`

	// The media type of the link
	MediaType *string `json:"mediaType,omitempty" yaml:"mediaType,omitempty"`

	// The type of the relationship
	Rel *string `json:"rel,omitempty" yaml:"rel,omitempty"`
}

// A link
type Link_1 struct {
	// The href of the link
	Href string `json:"href" yaml:"href"`

	// The media type of the link
	MediaType *string `json:"mediaType,omitempty" yaml:"mediaType,omitempty"`

	// The type of the relationship
	Rel *string `json:"rel,omitempty" yaml:"rel,omitempty"`
}

type NotificationLevel int

type NotificationLevel_1 int

// The pin of the device
type Pin struct {
	// The pattern of the pin
	Pattern *string `json:"pattern,omitempty" yaml:"pattern,omitempty"`

	// If the pin is required
	Required bool `json:"required" yaml:"required"`
}

// The pin of the device
type Pin_1 struct {
	// The pattern of the pin
	Pattern *string `json:"pattern,omitempty" yaml:"pattern,omitempty"`

	// If the pin is required
	Required bool `json:"required" yaml:"required"`
}

// Description of the Property
type Property struct {
	// The type of the property
	Type *string `json:"@type,omitempty" yaml:"@type,omitempty"`

	// Description of the property
	Description *string `json:"description,omitempty" yaml:"description,omitempty"`

	// Enum corresponds to the JSON schema field "enum".
	Enum []PropertyEnumElem `json:"enum,omitempty" yaml:"enum,omitempty"`

	// Forms corresponds to the JSON schema field "forms".
	Forms []PropertyFormsElem `json:"forms,omitempty" yaml:"forms,omitempty"`

	// The maximum value of the property
	Maximum *float64 `json:"maximum,omitempty" yaml:"maximum,omitempty"`

	// The minimum value of the property
	Minimum *float64 `json:"minimum,omitempty" yaml:"minimum,omitempty"`

	// The precision of the value
	MultipleOf *float64 `json:"multipleOf,omitempty" yaml:"multipleOf,omitempty"`

	// The name of the property
	Name *string `json:"name,omitempty" yaml:"name,omitempty"`

	// If the property is read-only
	ReadOnly *bool `json:"readOnly,omitempty" yaml:"readOnly,omitempty"`

	// The title of the property
	Title *string `json:"title,omitempty" yaml:"title,omitempty"`

	// The type of the property value
	Type_2 PropertyType_2 `json:"type" yaml:"type"`

	// The unit of the property
	Unit *string `json:"unit,omitempty" yaml:"unit,omitempty"`

	// The value of the property
	Value PropertyValue `json:"value,omitempty" yaml:"value,omitempty"`
}

// The possible values of the property
type PropertyEnumElem interface{}

// The possible values of the property
type PropertyEnumElem_1 interface{}

type PropertyFormsElem interface{}

type PropertyFormsElem_1 interface{}

type PropertyType_2 string

type PropertyType_2_1 string

const PropertyType_2_1_Array PropertyType_2_1 = "array"
const PropertyType_2_1_Boolean PropertyType_2_1 = "boolean"
const PropertyType_2_1_Integer PropertyType_2_1 = "integer"
const PropertyType_2_1_Null PropertyType_2_1 = "null"
const PropertyType_2_1_Number PropertyType_2_1 = "number"
const PropertyType_2_1_Object PropertyType_2_1 = "object"
const PropertyType_2_1_String PropertyType_2_1 = "string"
const PropertyType_2_Array PropertyType_2 = "array"
const PropertyType_2_Boolean PropertyType_2 = "boolean"
const PropertyType_2_Integer PropertyType_2 = "integer"
const PropertyType_2_Null PropertyType_2 = "null"
const PropertyType_2_Number PropertyType_2 = "number"
const PropertyType_2_Object PropertyType_2 = "object"
const PropertyType_2_String PropertyType_2 = "string"

// The value of the property
type PropertyValue interface{}

// The value of the property
type PropertyValue_1 interface{}

// Description of the Property
type Property_1 struct {
	// The type of the property
	Type *string `json:"@type,omitempty" yaml:"@type,omitempty"`

	// Description of the property
	Description *string `json:"description,omitempty" yaml:"description,omitempty"`

	// Enum corresponds to the JSON schema field "enum".
	Enum []PropertyEnumElem_1 `json:"enum,omitempty" yaml:"enum,omitempty"`

	// Forms corresponds to the JSON schema field "forms".
	Forms []PropertyFormsElem_1 `json:"forms,omitempty" yaml:"forms,omitempty"`

	// The maximum value of the property
	Maximum *float64 `json:"maximum,omitempty" yaml:"maximum,omitempty"`

	// The minimum value of the property
	Minimum *float64 `json:"minimum,omitempty" yaml:"minimum,omitempty"`

	// The precision of the value
	MultipleOf *float64 `json:"multipleOf,omitempty" yaml:"multipleOf,omitempty"`

	// The name of the property
	Name *string `json:"name,omitempty" yaml:"name,omitempty"`

	// If the property is read-only
	ReadOnly *bool `json:"readOnly,omitempty" yaml:"readOnly,omitempty"`

	// The title of the property
	Title *string `json:"title,omitempty" yaml:"title,omitempty"`

	// The type of the property value
	Type_2 PropertyType_2_1 `json:"type" yaml:"type"`

	// The unit of the property
	Unit *string `json:"unit,omitempty" yaml:"unit,omitempty"`

	// The value of the property
	Value PropertyValue_1 `json:"value,omitempty" yaml:"value,omitempty"`
}

type Scopes interface{}

type Scopes_1 interface{}

type Security interface{}

type Security_1 interface{}

var enumValues_ActionInputPropertyType_2 = []interface{}{
	"null",
	"boolean",
	"object",
	"array",
	"number",
	"integer",
	"string",
}
var enumValues_ActionInputPropertyType_2_1 = []interface{}{
	"null",
	"boolean",
	"object",
	"array",
	"number",
	"integer",
	"string",
}
var enumValues_EventType_2 = []interface{}{
	"null",
	"boolean",
	"object",
	"array",
	"number",
	"integer",
	"string",
}
var enumValues_EventType_2_1 = []interface{}{
	"null",
	"boolean",
	"object",
	"array",
	"number",
	"integer",
	"string",
}
var enumValues_NotificationLevel = []interface{}{
	0,
	1,
	2,
}
var enumValues_NotificationLevel_1 = []interface{}{
	0,
	1,
	2,
}
var enumValues_PropertyType_2 = []interface{}{
	"null",
	"boolean",
	"object",
	"array",
	"number",
	"integer",
	"string",
}
var enumValues_PropertyType_2_1 = []interface{}{
	"null",
	"boolean",
	"object",
	"array",
	"number",
	"integer",
	"string",
}
