// Code generated by github.com/atombender/go-jsonschema, DO NOT EDIT.

package messages

import "fmt"
import "encoding/json"

// Description of the outlet
type OutletAddedNotificationJsonDataOutlet struct {
	// ID of the Outlet
	Id string `json:"id" yaml:"id"`

	// Name of the Outlet
	Name string `json:"name" yaml:"name"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *OutletAddedNotificationJsonDataOutlet) UnmarshalJSON(b []byte) error {
	var raw map[string]any
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["id"]; !ok || v == nil {
		return fmt.Errorf("field id in OutletAddedNotificationJsonDataOutlet: required")
	}
	if v, ok := raw["name"]; !ok || v == nil {
		return fmt.Errorf("field name in OutletAddedNotificationJsonDataOutlet: required")
	}
	type Plain OutletAddedNotificationJsonDataOutlet
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = OutletAddedNotificationJsonDataOutlet(plain)
	return nil
}

// Message-specific data
type OutletAddedNotificationJsonData struct {
	// ID of the notifier
	NotifierId string `json:"notifierId" yaml:"notifierId"`

	// Description of the outlet
	Outlet OutletAddedNotificationJsonDataOutlet `json:"outlet" yaml:"outlet"`

	// ID of the plugin
	PluginId string `json:"pluginId" yaml:"pluginId"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *OutletAddedNotificationJsonData) UnmarshalJSON(b []byte) error {
	var raw map[string]any
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["notifierId"]; !ok || v == nil {
		return fmt.Errorf("field notifierId in OutletAddedNotificationJsonData: required")
	}
	if v, ok := raw["outlet"]; !ok || v == nil {
		return fmt.Errorf("field outlet in OutletAddedNotificationJsonData: required")
	}
	if v, ok := raw["pluginId"]; !ok || v == nil {
		return fmt.Errorf("field pluginId in OutletAddedNotificationJsonData: required")
	}
	type Plain OutletAddedNotificationJsonData
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = OutletAddedNotificationJsonData(plain)
	return nil
}

// Notification that a new outlet has been added to a notifier
type OutletAddedNotificationJson struct {
	// Message-specific data
	Data OutletAddedNotificationJsonData `json:"data" yaml:"data"`

	// The message type, used by the IPC client and server to differentiate messages
	MessageType int `json:"messageType" yaml:"messageType"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *OutletAddedNotificationJson) UnmarshalJSON(b []byte) error {
	var raw map[string]any
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["data"]; !ok || v == nil {
		return fmt.Errorf("field data in OutletAddedNotificationJson: required")
	}
	if v, ok := raw["messageType"]; !ok || v == nil {
		return fmt.Errorf("field messageType in OutletAddedNotificationJson: required")
	}
	type Plain OutletAddedNotificationJson
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = OutletAddedNotificationJson(plain)
	return nil
}
