// Code generated by github.com/atombender/go-jsonschema, DO NOT EDIT.

package messages

import "fmt"
import "encoding/json"

// Message-specific data
type MockAdapterAddDeviceResponseJsonData struct {
	// ID of the adapter
	AdapterId string `json:"adapterId" yaml:"adapterId"`

	// ID of the new device
	DeviceId *string `json:"deviceId,omitempty" yaml:"deviceId,omitempty"`

	// Error message in the case of failure
	Error *string `json:"error,omitempty" yaml:"error,omitempty"`

	// ID of the plugin
	PluginId string `json:"pluginId" yaml:"pluginId"`

	// Whether or not the operation was successful
	Success bool `json:"success" yaml:"success"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *MockAdapterAddDeviceResponseJsonData) UnmarshalJSON(b []byte) error {
	var raw map[string]any
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["adapterId"]; !ok || v == nil {
		return fmt.Errorf("field adapterId in MockAdapterAddDeviceResponseJsonData: required")
	}
	if v, ok := raw["pluginId"]; !ok || v == nil {
		return fmt.Errorf("field pluginId in MockAdapterAddDeviceResponseJsonData: required")
	}
	if v, ok := raw["success"]; !ok || v == nil {
		return fmt.Errorf("field success in MockAdapterAddDeviceResponseJsonData: required")
	}
	type Plain MockAdapterAddDeviceResponseJsonData
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = MockAdapterAddDeviceResponseJsonData(plain)
	return nil
}

// Notice that the mock adapter has finished adding a new device
type MockAdapterAddDeviceResponseJson struct {
	// Message-specific data
	Data MockAdapterAddDeviceResponseJsonData `json:"data" yaml:"data"`

	// The message type, used by the IPC client and api to differentiate messages
	MessageType int `json:"messageType" yaml:"messageType"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *MockAdapterAddDeviceResponseJson) UnmarshalJSON(b []byte) error {
	var raw map[string]any
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["data"]; !ok || v == nil {
		return fmt.Errorf("field data in MockAdapterAddDeviceResponseJson: required")
	}
	if v, ok := raw["messageType"]; !ok || v == nil {
		return fmt.Errorf("field messageType in MockAdapterAddDeviceResponseJson: required")
	}
	type Plain MockAdapterAddDeviceResponseJson
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = MockAdapterAddDeviceResponseJson(plain)
	return nil
}
