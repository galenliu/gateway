// Code generated by github.com/atombender/go-jsonschema, DO NOT EDIT.

package messages

import "fmt"
import "encoding/json"

// Message-specific data
type PluginErrorNotificationJsonData struct {
	// Error message
	Message string `json:"message" yaml:"message"`

	// ID of the plugin which has had an error
	PluginId string `json:"pluginId" yaml:"pluginId"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *PluginErrorNotificationJsonData) UnmarshalJSON(b []byte) error {
	var raw map[string]any
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["message"]; !ok || v == nil {
		return fmt.Errorf("field message in PluginErrorNotificationJsonData: required")
	}
	if v, ok := raw["pluginId"]; !ok || v == nil {
		return fmt.Errorf("field pluginId in PluginErrorNotificationJsonData: required")
	}
	type Plain PluginErrorNotificationJsonData
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = PluginErrorNotificationJsonData(plain)
	return nil
}

// Notification that a plugin has encountered an error while loading
type PluginErrorNotificationJson struct {
	// Message-specific data
	Data PluginErrorNotificationJsonData `json:"data" yaml:"data"`

	// The message type, used by the IPC client and server to differentiate messages
	MessageType int `json:"messageType" yaml:"messageType"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *PluginErrorNotificationJson) UnmarshalJSON(b []byte) error {
	var raw map[string]any
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["data"]; !ok || v == nil {
		return fmt.Errorf("field data in PluginErrorNotificationJson: required")
	}
	if v, ok := raw["messageType"]; !ok || v == nil {
		return fmt.Errorf("field messageType in PluginErrorNotificationJson: required")
	}
	type Plain PluginErrorNotificationJson
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = PluginErrorNotificationJson(plain)
	return nil
}
