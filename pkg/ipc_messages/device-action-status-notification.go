// Code generated by github.com/atombender/go-jsonschema, DO NOT EDIT.

package messages

import "fmt"

import "encoding/json"

// Description of the Action
// Notification that an action's status has changed on a device
type DeviceActionStatusNotificationJson struct {
	// Message-specific data
	Data DeviceActionStatusNotificationJsonData `json:"data" yaml:"data"`

	// The message type, used by the IPC client and server to differentiate messages
	MessageType int `json:"messageType" yaml:"messageType"`
}

// Message-specific data
type DeviceActionStatusNotificationJsonData struct {
	// Description of the action
	Action DeviceActionStatusNotificationJsonDataAction `json:"action" yaml:"action"`

	// ID of the adapter
	AdapterId string `json:"adapterId" yaml:"adapterId"`

	// ID of the device
	DeviceId string `json:"deviceId" yaml:"deviceId"`

	// ID of the plugin
	PluginId string `json:"pluginId" yaml:"pluginId"`
}

// Description of the action
type DeviceActionStatusNotificationJsonDataAction struct {
	// ID of the Action
	Id string `json:"id" yaml:"id"`

	// Input corresponds to the JSON schema field "input".
	Input DeviceActionStatusNotificationJsonDataActionInput `json:"input,omitempty" yaml:"input,omitempty"`

	// Name of the Action
	Name string `json:"name" yaml:"name"`

	// Status of the Action
	Status string `json:"status" yaml:"status"`

	// Completion time of the Action
	TimeCompleted *string `json:"timeCompleted,omitempty" yaml:"timeCompleted,omitempty"`

	// Request time of the Action
	TimeRequested string `json:"timeRequested" yaml:"timeRequested"`
}

type DeviceActionStatusNotificationJsonDataActionInput map[string]any

// UnmarshalJSON implements json.Unmarshaler.
func (j *DeviceActionStatusNotificationJsonDataAction) UnmarshalJSON(b []byte) error {
	var raw map[string]any
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["id"]; !ok || v == nil {
		return fmt.Errorf("field id in DeviceActionStatusNotificationJsonDataAction: required")
	}
	if v, ok := raw["name"]; !ok || v == nil {
		return fmt.Errorf("field name in DeviceActionStatusNotificationJsonDataAction: required")
	}
	if v, ok := raw["status"]; !ok || v == nil {
		return fmt.Errorf("field status in DeviceActionStatusNotificationJsonDataAction: required")
	}
	if v, ok := raw["timeRequested"]; !ok || v == nil {
		return fmt.Errorf("field timeRequested in DeviceActionStatusNotificationJsonDataAction: required")
	}
	type Plain DeviceActionStatusNotificationJsonDataAction
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = DeviceActionStatusNotificationJsonDataAction(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *DeviceActionStatusNotificationJsonData) UnmarshalJSON(b []byte) error {
	var raw map[string]any
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["action"]; !ok || v == nil {
		return fmt.Errorf("field action in DeviceActionStatusNotificationJsonData: required")
	}
	if v, ok := raw["adapterId"]; !ok || v == nil {
		return fmt.Errorf("field adapterId in DeviceActionStatusNotificationJsonData: required")
	}
	if v, ok := raw["deviceId"]; !ok || v == nil {
		return fmt.Errorf("field deviceId in DeviceActionStatusNotificationJsonData: required")
	}
	if v, ok := raw["pluginId"]; !ok || v == nil {
		return fmt.Errorf("field pluginId in DeviceActionStatusNotificationJsonData: required")
	}
	type Plain DeviceActionStatusNotificationJsonData
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = DeviceActionStatusNotificationJsonData(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *DeviceActionStatusNotificationJson) UnmarshalJSON(b []byte) error {
	var raw map[string]any
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["data"]; !ok || v == nil {
		return fmt.Errorf("field data in DeviceActionStatusNotificationJson: required")
	}
	if v, ok := raw["messageType"]; !ok || v == nil {
		return fmt.Errorf("field messageType in DeviceActionStatusNotificationJson: required")
	}
	type Plain DeviceActionStatusNotificationJson
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = DeviceActionStatusNotificationJson(plain)
	return nil
}
